// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/PostOffice/ at 2024-05-23T12:38:27.938159
package contractor

import (
	"context"
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"strconv"
	"strings"
	"time"
)

// PostofficeFoundationPost - Model FoundationPost(/api/v1/PostOffice/FoundationPost)
/*
FoundationPost(id, name, updated, created, foundation)
*/
type PostofficeFoundationPost struct {
	cinp.BaseObject
	cinp       *cinp.CInP `json:"-"`
	Name       *string    `json:"name,omitempty"`
	Updated    *time.Time `json:"updated,omitempty"`
	Created    *time.Time `json:"created,omitempty"`
	Foundation *string    `json:"foundation,omitempty"`
	ID         *int       `json:"id,omitempty"`
}

// PostofficeFoundationPostNew - Make a new object of Model FoundationPost
func (service *Contractor) PostofficeFoundationPostNew() *PostofficeFoundationPost {
	return &PostofficeFoundationPost{cinp: service.cinp}
}

// PostofficeFoundationPostNewWithID - Make a new object of Model FoundationPost
func (service *Contractor) PostofficeFoundationPostNewWithID(id int) *PostofficeFoundationPost {
	result := PostofficeFoundationPost{cinp: service.cinp}
	result.SetURI("/api/v1/PostOffice/FoundationPost:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// PostofficeFoundationPostGet - Get function for Model FoundationPost
func (service *Contractor) PostofficeFoundationPostGet(ctx context.Context, id int) (*PostofficeFoundationPost, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/PostOffice/FoundationPost:"+strconv.FormatInt(int64(id), 10)+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeFoundationPost)
	result.cinp = service.cinp

	return result, nil
}

// PostofficeFoundationPostGetURI - Get function for Model FoundationPost vi URI
func (service *Contractor) PostofficeFoundationPostGetURI(ctx context.Context, uri string) (*PostofficeFoundationPost, error) {
	if !strings.HasPrefix(uri, "/api/v1/PostOffice/FoundationPost:") {
		return nil, fmt.Errorf("URI is not for a 'PostofficeFoundationPost'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeFoundationPost)
	result.cinp = service.cinp

	return result, nil
}

// PostofficeFoundationPostListFilters - Return a slice of valid filter names FoundationPost
func (service *Contractor) PostofficeFoundationPostListFilters() [0]string {
	return [0]string{}
}

// PostofficeFoundationPostList - List function for Model FoundationPost
func (service *Contractor) PostofficeFoundationPostList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *PostofficeFoundationPost, error) {
	if filterName != "" {
		for _, item := range service.PostofficeFoundationPostListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/PostOffice/FoundationPost", reflect.TypeOf(PostofficeFoundationPost{}), filterName, filterValues, 50)
	out := make(chan *PostofficeFoundationPost)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*PostofficeFoundationPost).cinp = service.cinp
			out <- (*v).(*PostofficeFoundationPost)
		}
	}()
	return out, nil
}

// PostofficeStructurePost - Model StructurePost(/api/v1/PostOffice/StructurePost)
/*
StructurePost(id, name, updated, created, structure)
*/
type PostofficeStructurePost struct {
	cinp.BaseObject
	cinp      *cinp.CInP `json:"-"`
	Name      *string    `json:"name,omitempty"`
	Updated   *time.Time `json:"updated,omitempty"`
	Created   *time.Time `json:"created,omitempty"`
	Structure *string    `json:"structure,omitempty"`
	ID        *int       `json:"id,omitempty"`
}

// PostofficeStructurePostNew - Make a new object of Model StructurePost
func (service *Contractor) PostofficeStructurePostNew() *PostofficeStructurePost {
	return &PostofficeStructurePost{cinp: service.cinp}
}

// PostofficeStructurePostNewWithID - Make a new object of Model StructurePost
func (service *Contractor) PostofficeStructurePostNewWithID(id int) *PostofficeStructurePost {
	result := PostofficeStructurePost{cinp: service.cinp}
	result.SetURI("/api/v1/PostOffice/StructurePost:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// PostofficeStructurePostGet - Get function for Model StructurePost
func (service *Contractor) PostofficeStructurePostGet(ctx context.Context, id int) (*PostofficeStructurePost, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/PostOffice/StructurePost:"+strconv.FormatInt(int64(id), 10)+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeStructurePost)
	result.cinp = service.cinp

	return result, nil
}

// PostofficeStructurePostGetURI - Get function for Model StructurePost vi URI
func (service *Contractor) PostofficeStructurePostGetURI(ctx context.Context, uri string) (*PostofficeStructurePost, error) {
	if !strings.HasPrefix(uri, "/api/v1/PostOffice/StructurePost:") {
		return nil, fmt.Errorf("URI is not for a 'PostofficeStructurePost'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeStructurePost)
	result.cinp = service.cinp

	return result, nil
}

// PostofficeStructurePostListFilters - Return a slice of valid filter names StructurePost
func (service *Contractor) PostofficeStructurePostListFilters() [0]string {
	return [0]string{}
}

// PostofficeStructurePostList - List function for Model StructurePost
func (service *Contractor) PostofficeStructurePostList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *PostofficeStructurePost, error) {
	if filterName != "" {
		for _, item := range service.PostofficeStructurePostListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/PostOffice/StructurePost", reflect.TypeOf(PostofficeStructurePost{}), filterName, filterValues, 50)
	out := make(chan *PostofficeStructurePost)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*PostofficeStructurePost).cinp = service.cinp
			out <- (*v).(*PostofficeStructurePost)
		}
	}()
	return out, nil
}

// PostofficeFoundationBox - Model FoundationBox(/api/v1/PostOffice/FoundationBox)
/*
FoundationBox(id, url, proxy, type, one_shot, extra_data, expires, updated, created, foundation)
*/
type PostofficeFoundationBox struct {
	cinp.BaseObject
	cinp       *cinp.CInP              `json:"-"`
	URL        *string                 `json:"url,omitempty"`
	Proxy      *string                 `json:"proxy,omitempty"`
	Type       *string                 `json:"type,omitempty"`
	OneShot    *bool                   `json:"one_shot,omitempty"`
	ExtraData  *map[string]interface{} `json:"extra_data,omitempty"`
	Expires    *time.Time              `json:"expires,omitempty"`
	Updated    *time.Time              `json:"updated,omitempty"`
	Created    *time.Time              `json:"created,omitempty"`
	Foundation *string                 `json:"foundation,omitempty"`
	ID         *int                    `json:"id,omitempty"`
}

// PostofficeFoundationBoxNew - Make a new object of Model FoundationBox
func (service *Contractor) PostofficeFoundationBoxNew() *PostofficeFoundationBox {
	return &PostofficeFoundationBox{cinp: service.cinp}
}

// PostofficeFoundationBoxNewWithID - Make a new object of Model FoundationBox
func (service *Contractor) PostofficeFoundationBoxNewWithID(id int) *PostofficeFoundationBox {
	result := PostofficeFoundationBox{cinp: service.cinp}
	result.SetURI("/api/v1/PostOffice/FoundationBox:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// PostofficeFoundationBoxGet - Get function for Model FoundationBox
func (service *Contractor) PostofficeFoundationBoxGet(ctx context.Context, id int) (*PostofficeFoundationBox, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/PostOffice/FoundationBox:"+strconv.FormatInt(int64(id), 10)+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeFoundationBox)
	result.cinp = service.cinp

	return result, nil
}

// PostofficeFoundationBoxGetURI - Get function for Model FoundationBox vi URI
func (service *Contractor) PostofficeFoundationBoxGetURI(ctx context.Context, uri string) (*PostofficeFoundationBox, error) {
	if !strings.HasPrefix(uri, "/api/v1/PostOffice/FoundationBox:") {
		return nil, fmt.Errorf("URI is not for a 'PostofficeFoundationBox'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeFoundationBox)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model FoundationBox
func (object *PostofficeFoundationBox) Create(ctx context.Context) (*PostofficeFoundationBox, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/PostOffice/FoundationBox", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*PostofficeFoundationBox), nil
}

// Update - Update function for Model FoundationBox
func (object *PostofficeFoundationBox) Update(ctx context.Context) (*PostofficeFoundationBox, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*PostofficeFoundationBox), nil
}

// Delete - Delete function for Model FoundationBox
func (object *PostofficeFoundationBox) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// PostofficeFoundationBoxListFilters - Return a slice of valid filter names FoundationBox
func (service *Contractor) PostofficeFoundationBoxListFilters() [0]string {
	return [0]string{}
}

// PostofficeFoundationBoxList - List function for Model FoundationBox
func (service *Contractor) PostofficeFoundationBoxList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *PostofficeFoundationBox, error) {
	if filterName != "" {
		for _, item := range service.PostofficeFoundationBoxListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/PostOffice/FoundationBox", reflect.TypeOf(PostofficeFoundationBox{}), filterName, filterValues, 50)
	out := make(chan *PostofficeFoundationBox)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*PostofficeFoundationBox).cinp = service.cinp
			out <- (*v).(*PostofficeFoundationBox)
		}
	}()
	return out, nil
}

// CallExtend calls extend
func (object *PostofficeFoundationBox) CallExtend(ctx context.Context, AdditionalHours int) error {
	args := map[string]interface{}{
		"additional_hours": AdditionalHours,
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetURI())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/PostOffice/FoundationBox(extend)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(ctx, uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// PostofficeStructureBox - Model StructureBox(/api/v1/PostOffice/StructureBox)
/*
StructureBox(id, url, proxy, type, one_shot, extra_data, expires, updated, created, structure)
*/
type PostofficeStructureBox struct {
	cinp.BaseObject
	cinp      *cinp.CInP              `json:"-"`
	URL       *string                 `json:"url,omitempty"`
	Proxy     *string                 `json:"proxy,omitempty"`
	Type      *string                 `json:"type,omitempty"`
	OneShot   *bool                   `json:"one_shot,omitempty"`
	ExtraData *map[string]interface{} `json:"extra_data,omitempty"`
	Expires   *time.Time              `json:"expires,omitempty"`
	Updated   *time.Time              `json:"updated,omitempty"`
	Created   *time.Time              `json:"created,omitempty"`
	Structure *string                 `json:"structure,omitempty"`
	ID        *int                    `json:"id,omitempty"`
}

// PostofficeStructureBoxNew - Make a new object of Model StructureBox
func (service *Contractor) PostofficeStructureBoxNew() *PostofficeStructureBox {
	return &PostofficeStructureBox{cinp: service.cinp}
}

// PostofficeStructureBoxNewWithID - Make a new object of Model StructureBox
func (service *Contractor) PostofficeStructureBoxNewWithID(id int) *PostofficeStructureBox {
	result := PostofficeStructureBox{cinp: service.cinp}
	result.SetURI("/api/v1/PostOffice/StructureBox:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// PostofficeStructureBoxGet - Get function for Model StructureBox
func (service *Contractor) PostofficeStructureBoxGet(ctx context.Context, id int) (*PostofficeStructureBox, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/PostOffice/StructureBox:"+strconv.FormatInt(int64(id), 10)+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeStructureBox)
	result.cinp = service.cinp

	return result, nil
}

// PostofficeStructureBoxGetURI - Get function for Model StructureBox vi URI
func (service *Contractor) PostofficeStructureBoxGetURI(ctx context.Context, uri string) (*PostofficeStructureBox, error) {
	if !strings.HasPrefix(uri, "/api/v1/PostOffice/StructureBox:") {
		return nil, fmt.Errorf("URI is not for a 'PostofficeStructureBox'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeStructureBox)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model StructureBox
func (object *PostofficeStructureBox) Create(ctx context.Context) (*PostofficeStructureBox, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/PostOffice/StructureBox", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*PostofficeStructureBox), nil
}

// Update - Update function for Model StructureBox
func (object *PostofficeStructureBox) Update(ctx context.Context) (*PostofficeStructureBox, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*PostofficeStructureBox), nil
}

// Delete - Delete function for Model StructureBox
func (object *PostofficeStructureBox) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// PostofficeStructureBoxListFilters - Return a slice of valid filter names StructureBox
func (service *Contractor) PostofficeStructureBoxListFilters() [0]string {
	return [0]string{}
}

// PostofficeStructureBoxList - List function for Model StructureBox
func (service *Contractor) PostofficeStructureBoxList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *PostofficeStructureBox, error) {
	if filterName != "" {
		for _, item := range service.PostofficeStructureBoxListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/PostOffice/StructureBox", reflect.TypeOf(PostofficeStructureBox{}), filterName, filterValues, 50)
	out := make(chan *PostofficeStructureBox)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*PostofficeStructureBox).cinp = service.cinp
			out <- (*v).(*PostofficeStructureBox)
		}
	}()
	return out, nil
}

// CallExtend calls extend
func (object *PostofficeStructureBox) CallExtend(ctx context.Context, AdditionalHours int) error {
	args := map[string]interface{}{
		"additional_hours": AdditionalHours,
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetURI())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/PostOffice/StructureBox(extend)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(ctx, uri, &args, &result); err != nil {
		return err
	}

	return nil
}
func registerPostOffice(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/PostOffice/FoundationPost", reflect.TypeOf((*PostofficeFoundationPost)(nil)).Elem())
	cinp.RegisterType("/api/v1/PostOffice/StructurePost", reflect.TypeOf((*PostofficeStructurePost)(nil)).Elem())
	cinp.RegisterType("/api/v1/PostOffice/FoundationBox", reflect.TypeOf((*PostofficeFoundationBox)(nil)).Elem())
	cinp.RegisterType("/api/v1/PostOffice/StructureBox", reflect.TypeOf((*PostofficeStructureBox)(nil)).Elem())
}
