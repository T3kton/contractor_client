// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/PostOffice/ at 2022-01-08T19:31:37.129298
package contractor

import (
	cinp "github.com/cinp/go"
	"fmt"
	"reflect"
	"strconv"
	"time"
)
// PostofficeFoundationPost - Model FoundationPost(/api/v1/PostOffice/FoundationPost)
/*
FoundationPost(id, name, updated, created, foundation)
*/
type PostofficeFoundationPost struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Name string `json:"name"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	Foundation string `json:"foundation"`
	ID int `json:"id"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *PostofficeFoundationPost) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"name": object.Name,
			"foundation": object.Foundation,
		}
	}
	return &map[string]interface{}{ 
		"name": object.Name,
		"foundation": object.Foundation,
	}
}

// PostofficeFoundationPostNew - Make a new object of Model FoundationPost
func (service *Contractor) PostofficeFoundationPostNew() *PostofficeFoundationPost {
	return &PostofficeFoundationPost{cinp: service.cinp}
}

// PostofficeFoundationPostNewWithID - Make a new object of Model FoundationPost
func (service *Contractor) PostofficeFoundationPostNewWithID(id int) *PostofficeFoundationPost {
	result := PostofficeFoundationPost{cinp: service.cinp}
	result.SetID("/api/v1/PostOffice/FoundationPost:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// PostofficeFoundationPostGet - Get function for Model FoundationPost
func (service *Contractor) PostofficeFoundationPostGet(id int) (*PostofficeFoundationPost, error) {
	object, err := service.cinp.Get("/api/v1/PostOffice/FoundationPost:" + strconv.FormatInt(int64(id), 10) + ":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeFoundationPost)
	result.cinp = service.cinp

	return result, nil
}

// PostofficeFoundationPostListFilters - Return a slice of valid filter names FoundationPost
func (service *Contractor) PostofficeFoundationPostListFilters() [0]string {
  return [0]string{  }
}

// PostofficeFoundationPostList - List function for Model FoundationPost
func (service *Contractor) PostofficeFoundationPostList(filterName string, filterValues map[string]interface{}) (<-chan *PostofficeFoundationPost, error) {
	if filterName != "" {
		for _, item := range service.PostofficeFoundationPostListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	good:
	}

	in := service.cinp.ListObjects("/api/v1/PostOffice/FoundationPost", reflect.TypeOf(PostofficeFoundationPost{}), filterName, filterValues, 50)
	out := make(chan *PostofficeFoundationPost)
	go func() {
		defer close(out)
		for v := range in {
			v.(*PostofficeFoundationPost).cinp = service.cinp
			out <- v.(*PostofficeFoundationPost)
		}
	}()
	return out, nil
}

// PostofficeStructurePost - Model StructurePost(/api/v1/PostOffice/StructurePost)
/*
StructurePost(id, name, updated, created, structure)
*/
type PostofficeStructurePost struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Name string `json:"name"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	Structure string `json:"structure"`
	ID int `json:"id"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *PostofficeStructurePost) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"name": object.Name,
			"structure": object.Structure,
		}
	}
	return &map[string]interface{}{ 
		"name": object.Name,
		"structure": object.Structure,
	}
}

// PostofficeStructurePostNew - Make a new object of Model StructurePost
func (service *Contractor) PostofficeStructurePostNew() *PostofficeStructurePost {
	return &PostofficeStructurePost{cinp: service.cinp}
}

// PostofficeStructurePostNewWithID - Make a new object of Model StructurePost
func (service *Contractor) PostofficeStructurePostNewWithID(id int) *PostofficeStructurePost {
	result := PostofficeStructurePost{cinp: service.cinp}
	result.SetID("/api/v1/PostOffice/StructurePost:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// PostofficeStructurePostGet - Get function for Model StructurePost
func (service *Contractor) PostofficeStructurePostGet(id int) (*PostofficeStructurePost, error) {
	object, err := service.cinp.Get("/api/v1/PostOffice/StructurePost:" + strconv.FormatInt(int64(id), 10) + ":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeStructurePost)
	result.cinp = service.cinp

	return result, nil
}

// PostofficeStructurePostListFilters - Return a slice of valid filter names StructurePost
func (service *Contractor) PostofficeStructurePostListFilters() [0]string {
  return [0]string{  }
}

// PostofficeStructurePostList - List function for Model StructurePost
func (service *Contractor) PostofficeStructurePostList(filterName string, filterValues map[string]interface{}) (<-chan *PostofficeStructurePost, error) {
	if filterName != "" {
		for _, item := range service.PostofficeStructurePostListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	good:
	}

	in := service.cinp.ListObjects("/api/v1/PostOffice/StructurePost", reflect.TypeOf(PostofficeStructurePost{}), filterName, filterValues, 50)
	out := make(chan *PostofficeStructurePost)
	go func() {
		defer close(out)
		for v := range in {
			v.(*PostofficeStructurePost).cinp = service.cinp
			out <- v.(*PostofficeStructurePost)
		}
	}()
	return out, nil
}

// PostofficeFoundationBox - Model FoundationBox(/api/v1/PostOffice/FoundationBox)
/*
FoundationBox(id, url, proxy, type, one_shot, extra_data, expires, updated, created, foundation)
*/
type PostofficeFoundationBox struct {
	cinp.BaseObject
	cinp *cinp.CInP
	URL string `json:"url"`
	Proxy string `json:"proxy"`
	Type string `json:"type"`
	OneShot bool `json:"one_shot"`
	ExtraData map[string]interface{} `json:"extra_data"`
	Expires time.Time `json:"expires"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	Foundation string `json:"foundation"`
	ID int `json:"id"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *PostofficeFoundationBox) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"url": object.URL,
			"proxy": object.Proxy,
			"type": object.Type,
			"one_shot": object.OneShot,
			"extra_data": object.ExtraData,
			"expires": object.Expires,
			"foundation": object.Foundation,
		}
	}
	return &map[string]interface{}{ 
		"url": object.URL,
		"proxy": object.Proxy,
		"type": object.Type,
		"one_shot": object.OneShot,
		"extra_data": object.ExtraData,
		"expires": object.Expires,
		"foundation": object.Foundation,
	}
}

// PostofficeFoundationBoxNew - Make a new object of Model FoundationBox
func (service *Contractor) PostofficeFoundationBoxNew() *PostofficeFoundationBox {
	return &PostofficeFoundationBox{cinp: service.cinp}
}

// PostofficeFoundationBoxNewWithID - Make a new object of Model FoundationBox
func (service *Contractor) PostofficeFoundationBoxNewWithID(id int) *PostofficeFoundationBox {
	result := PostofficeFoundationBox{cinp: service.cinp}
	result.SetID("/api/v1/PostOffice/FoundationBox:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// PostofficeFoundationBoxGet - Get function for Model FoundationBox
func (service *Contractor) PostofficeFoundationBoxGet(id int) (*PostofficeFoundationBox, error) {
	object, err := service.cinp.Get("/api/v1/PostOffice/FoundationBox:" + strconv.FormatInt(int64(id), 10) + ":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeFoundationBox)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model FoundationBox
func (object *PostofficeFoundationBox) Create() error {
	if err := object.cinp.Create("/api/v1/PostOffice/FoundationBox", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model FoundationBox
func (object *PostofficeFoundationBox) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model FoundationBox
func (object *PostofficeFoundationBox) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// PostofficeFoundationBoxListFilters - Return a slice of valid filter names FoundationBox
func (service *Contractor) PostofficeFoundationBoxListFilters() [0]string {
  return [0]string{  }
}

// PostofficeFoundationBoxList - List function for Model FoundationBox
func (service *Contractor) PostofficeFoundationBoxList(filterName string, filterValues map[string]interface{}) (<-chan *PostofficeFoundationBox, error) {
	if filterName != "" {
		for _, item := range service.PostofficeFoundationBoxListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	good:
	}

	in := service.cinp.ListObjects("/api/v1/PostOffice/FoundationBox", reflect.TypeOf(PostofficeFoundationBox{}), filterName, filterValues, 50)
	out := make(chan *PostofficeFoundationBox)
	go func() {
		defer close(out)
		for v := range in {
			v.(*PostofficeFoundationBox).cinp = service.cinp
			out <- v.(*PostofficeFoundationBox)
		}
	}()
	return out, nil
}


// CallExtend calls extend
func (object *PostofficeFoundationBox) CallExtend(AdditionalHours int) (error) {
	args := map[string]interface{}{
		"additional_hours": AdditionalHours,
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/PostOffice/FoundationBox(extend)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}
// PostofficeStructureBox - Model StructureBox(/api/v1/PostOffice/StructureBox)
/*
StructureBox(id, url, proxy, type, one_shot, extra_data, expires, updated, created, structure)
*/
type PostofficeStructureBox struct {
	cinp.BaseObject
	cinp *cinp.CInP
	URL string `json:"url"`
	Proxy string `json:"proxy"`
	Type string `json:"type"`
	OneShot bool `json:"one_shot"`
	ExtraData map[string]interface{} `json:"extra_data"`
	Expires time.Time `json:"expires"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	Structure string `json:"structure"`
	ID int `json:"id"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *PostofficeStructureBox) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"url": object.URL,
			"proxy": object.Proxy,
			"type": object.Type,
			"one_shot": object.OneShot,
			"extra_data": object.ExtraData,
			"expires": object.Expires,
			"structure": object.Structure,
		}
	}
	return &map[string]interface{}{ 
		"url": object.URL,
		"proxy": object.Proxy,
		"type": object.Type,
		"one_shot": object.OneShot,
		"extra_data": object.ExtraData,
		"expires": object.Expires,
		"structure": object.Structure,
	}
}

// PostofficeStructureBoxNew - Make a new object of Model StructureBox
func (service *Contractor) PostofficeStructureBoxNew() *PostofficeStructureBox {
	return &PostofficeStructureBox{cinp: service.cinp}
}

// PostofficeStructureBoxNewWithID - Make a new object of Model StructureBox
func (service *Contractor) PostofficeStructureBoxNewWithID(id int) *PostofficeStructureBox {
	result := PostofficeStructureBox{cinp: service.cinp}
	result.SetID("/api/v1/PostOffice/StructureBox:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// PostofficeStructureBoxGet - Get function for Model StructureBox
func (service *Contractor) PostofficeStructureBoxGet(id int) (*PostofficeStructureBox, error) {
	object, err := service.cinp.Get("/api/v1/PostOffice/StructureBox:" + strconv.FormatInt(int64(id), 10) + ":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PostofficeStructureBox)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model StructureBox
func (object *PostofficeStructureBox) Create() error {
	if err := object.cinp.Create("/api/v1/PostOffice/StructureBox", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model StructureBox
func (object *PostofficeStructureBox) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model StructureBox
func (object *PostofficeStructureBox) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// PostofficeStructureBoxListFilters - Return a slice of valid filter names StructureBox
func (service *Contractor) PostofficeStructureBoxListFilters() [0]string {
  return [0]string{  }
}

// PostofficeStructureBoxList - List function for Model StructureBox
func (service *Contractor) PostofficeStructureBoxList(filterName string, filterValues map[string]interface{}) (<-chan *PostofficeStructureBox, error) {
	if filterName != "" {
		for _, item := range service.PostofficeStructureBoxListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	good:
	}

	in := service.cinp.ListObjects("/api/v1/PostOffice/StructureBox", reflect.TypeOf(PostofficeStructureBox{}), filterName, filterValues, 50)
	out := make(chan *PostofficeStructureBox)
	go func() {
		defer close(out)
		for v := range in {
			v.(*PostofficeStructureBox).cinp = service.cinp
			out <- v.(*PostofficeStructureBox)
		}
	}()
	return out, nil
}


// CallExtend calls extend
func (object *PostofficeStructureBox) CallExtend(AdditionalHours int) (error) {
	args := map[string]interface{}{
		"additional_hours": AdditionalHours,
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/PostOffice/StructureBox(extend)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}
func registerPostOffice(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/PostOffice/FoundationPost", reflect.TypeOf((*PostofficeFoundationPost)(nil)).Elem())
	cinp.RegisterType("/api/v1/PostOffice/StructurePost", reflect.TypeOf((*PostofficeStructurePost)(nil)).Elem())
	cinp.RegisterType("/api/v1/PostOffice/FoundationBox", reflect.TypeOf((*PostofficeFoundationBox)(nil)).Elem())
	cinp.RegisterType("/api/v1/PostOffice/StructureBox", reflect.TypeOf((*PostofficeStructureBox)(nil)).Elem())
}
