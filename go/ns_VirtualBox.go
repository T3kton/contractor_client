/*Package contractor(version: "0.1") - Automatically generated by cinp-codegen from /api/v1/VirtualBox/ at 2020-04-22T13:17:43.544062
Plugin for VirtualBox.

 */
package contractor

import (
	"time"
	"reflect"
	cinp "github.com/cinp/go"
)

//VirtualboxVirtualBoxComplex - Model VirtualBoxComplex(/api/v1/VirtualBox/VirtualBoxComplex)
/*
Complex for VirtualBox.  Only one member is allowed.  The ip address
for managing the VirtualBox instance comes from the member's primary ip.
 */
type VirtualboxVirtualBoxComplex struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Name string `json:"name"`
	Site string `json:"site"`
	Description string `json:"description"`
	BuiltPercentage int `json:"built_percentage"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	VirtualboxUsername string `json:"virtualbox_username"`
	VirtualboxPassword string `json:"virtualbox_password"`
	Members []string `json:"members"`
	State string `json:"state"`
	Type string `json:"type"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *VirtualboxVirtualBoxComplex) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"name": object.Name,
			"site": object.Site,
			"description": object.Description,
			"built_percentage": object.BuiltPercentage,
			"virtualbox_username": object.VirtualboxUsername,
			"virtualbox_password": object.VirtualboxPassword,
		}
	}
	return &map[string]interface{}{ 
		"site": object.Site,
		"description": object.Description,
		"built_percentage": object.BuiltPercentage,
		"virtualbox_username": object.VirtualboxUsername,
		"virtualbox_password": object.VirtualboxPassword,
	}
}

// VirtualboxVirtualBoxComplexNew - Make a new object of Model VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexNew() *VirtualboxVirtualBoxComplex {
	return &VirtualboxVirtualBoxComplex{cinp: service.cinp}
}

// VirtualboxVirtualBoxComplexNewWithID - Make a new object of Model VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexNewWithID(id string) *VirtualboxVirtualBoxComplex {
	result := VirtualboxVirtualBoxComplex{cinp: service.cinp}
	result.SetID("/api/v1/VirtualBox/VirtualBoxComplex:"+id+":")
	return &result
}

// VirtualboxVirtualBoxComplexGet - Get function for Model VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexGet(id string) (*VirtualboxVirtualBoxComplex, error) {
	object, err := service.cinp.Get("/api/v1/VirtualBox/VirtualBoxComplex:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*VirtualboxVirtualBoxComplex)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model VirtualBoxComplex
func (object *VirtualboxVirtualBoxComplex) Create() error {
	if err := object.cinp.Create("/api/v1/VirtualBox/VirtualBoxComplex", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model VirtualBoxComplex
func (object *VirtualboxVirtualBoxComplex) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model VirtualBoxComplex
func (object *VirtualboxVirtualBoxComplex) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// VirtualboxVirtualBoxComplexList - List function for Model VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexList(filterName string, filterValues map[string]interface{}) <-chan *VirtualboxVirtualBoxComplex {
	in := service.cinp.ListObjects("/api/v1/VirtualBox/VirtualBoxComplex", reflect.TypeOf(VirtualboxVirtualBoxComplex{}), filterName, filterValues, 50)
	out := make(chan *VirtualboxVirtualBoxComplex)
	go func() {
		defer close(out)
		for v := range in {
			out <- v.(*VirtualboxVirtualBoxComplex)
		}
	}()
	return out
}


//VirtualboxVirtualBoxFoundation - Model VirtualBoxFoundation(/api/v1/VirtualBox/VirtualBoxFoundation)
/*
Foundation for use with VirtualBoxComplex.  Foundation instances are tracked
by the internal VirtualBox Hardware UUID.
 */
type VirtualboxVirtualBoxFoundation struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Locator string `json:"locator"`
	Site string `json:"site"`
	Blueprint string `json:"blueprint"`
	IDMap string `json:"id_map"`
	LocatedAt time.Time `json:"located_at"`
	BuiltAt time.Time `json:"built_at"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	VirtualboxComplex string `json:"virtualbox_complex"`
	VirtualboxUUID string `json:"virtualbox_uuid"`
	State string `json:"state"`
	Type string `json:"type"`
	ClassList string `json:"class_list"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *VirtualboxVirtualBoxFoundation) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"locator": object.Locator,
			"site": object.Site,
			"blueprint": object.Blueprint,
			"id_map": object.IDMap,
			"virtualbox_complex": object.VirtualboxComplex,
		}
	}
	return &map[string]interface{}{ 
		"site": object.Site,
		"blueprint": object.Blueprint,
		"id_map": object.IDMap,
		"virtualbox_complex": object.VirtualboxComplex,
	}
}

// VirtualboxVirtualBoxFoundationNew - Make a new object of Model VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationNew() *VirtualboxVirtualBoxFoundation {
	return &VirtualboxVirtualBoxFoundation{cinp: service.cinp}
}

// VirtualboxVirtualBoxFoundationNewWithID - Make a new object of Model VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationNewWithID(id string) *VirtualboxVirtualBoxFoundation {
	result := VirtualboxVirtualBoxFoundation{cinp: service.cinp}
	result.SetID("/api/v1/VirtualBox/VirtualBoxFoundation:"+id+":")
	return &result
}

// VirtualboxVirtualBoxFoundationGet - Get function for Model VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationGet(id string) (*VirtualboxVirtualBoxFoundation, error) {
	object, err := service.cinp.Get("/api/v1/VirtualBox/VirtualBoxFoundation:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*VirtualboxVirtualBoxFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model VirtualBoxFoundation
func (object *VirtualboxVirtualBoxFoundation) Create() error {
	if err := object.cinp.Create("/api/v1/VirtualBox/VirtualBoxFoundation", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model VirtualBoxFoundation
func (object *VirtualboxVirtualBoxFoundation) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model VirtualBoxFoundation
func (object *VirtualboxVirtualBoxFoundation) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// VirtualboxVirtualBoxFoundationList - List function for Model VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationList(filterName string, filterValues map[string]interface{}) <-chan *VirtualboxVirtualBoxFoundation {
	in := service.cinp.ListObjects("/api/v1/VirtualBox/VirtualBoxFoundation", reflect.TypeOf(VirtualboxVirtualBoxFoundation{}), filterName, filterValues, 50)
	out := make(chan *VirtualboxVirtualBoxFoundation)
	go func() {
		defer close(out)
		for v := range in {
			out <- v.(*VirtualboxVirtualBoxFoundation)
		}
	}()
	return out
}

func registerVirtualBox(cinp *cinp.CInP) { 
	cinp.RegisterType("/api/v1/VirtualBox/VirtualBoxComplex", reflect.TypeOf((*VirtualboxVirtualBoxComplex)(nil)).Elem())
	cinp.RegisterType("/api/v1/VirtualBox/VirtualBoxFoundation", reflect.TypeOf((*VirtualboxVirtualBoxFoundation)(nil)).Elem())
}