// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/Site/ at 2024-04-06T21:00:29.771165
package contractor

import (
	"context"
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"strings"
	"time"
)

// SiteSite - Model Site(/api/v1/Site/Site)
/*
Site(name, zone, description, parent, config_values, updated, created)
*/
type SiteSite struct {
	cinp.BaseObject
	cinp         *cinp.CInP              `json:"-"`
	Name         *string                 `json:"name,omitempty"`
	Zone         *string                 `json:"zone,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Parent       *string                 `json:"parent,omitempty"`
	ConfigValues *map[string]interface{} `json:"config_values,omitempty"`
	Updated      *time.Time              `json:"updated,omitempty"`
	Created      *time.Time              `json:"created,omitempty"`
}

// SiteSiteNew - Make a new object of Model Site
func (service *Contractor) SiteSiteNew() *SiteSite {
	return &SiteSite{cinp: service.cinp}
}

// SiteSiteNewWithID - Make a new object of Model Site
func (service *Contractor) SiteSiteNewWithID(id string) *SiteSite {
	result := SiteSite{cinp: service.cinp}
	result.SetURI("/api/v1/Site/Site:" + id + ":")
	return &result
}

// SiteSiteGet - Get function for Model Site
func (service *Contractor) SiteSiteGet(ctx context.Context, id string) (*SiteSite, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/Site/Site:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*SiteSite)
	result.cinp = service.cinp

	return result, nil
}

// SiteSiteGetURI - Get function for Model Site vi URI
func (service *Contractor) SiteSiteGetURI(ctx context.Context, uri string) (*SiteSite, error) {
	if !strings.HasPrefix(uri, "/api/v1/Site/Site:") {
		return nil, fmt.Errorf("URI is not for a 'SiteSite'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*SiteSite)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model Site
func (object *SiteSite) Create(ctx context.Context) (*SiteSite, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/Site/Site", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*SiteSite), nil
}

// Update - Update function for Model Site
func (object *SiteSite) Update(ctx context.Context) (*SiteSite, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*SiteSite), nil
}

// Delete - Delete function for Model Site
func (object *SiteSite) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// SiteSiteListFilters - Return a slice of valid filter names Site
func (service *Contractor) SiteSiteListFilters() [0]string {
	return [0]string{}
}

// SiteSiteList - List function for Model Site
func (service *Contractor) SiteSiteList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *SiteSite, error) {
	if filterName != "" {
		for _, item := range service.SiteSiteListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/Site/Site", reflect.TypeOf(SiteSite{}), filterName, filterValues, 50)
	out := make(chan *SiteSite)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*SiteSite).cinp = service.cinp
			out <- (*v).(*SiteSite)
		}
	}()
	return out, nil
}

// CallGetConfig calls getConfig
func (object *SiteSite) CallGetConfig(ctx context.Context) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	_, _, _, ids, _, err := object.cinp.Split(object.GetURI())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Site/Site(getConfig)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(ctx, uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallGetDependencyMap calls getDependencyMap
func (object *SiteSite) CallGetDependencyMap(ctx context.Context) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	_, _, _, ids, _, err := object.cinp.Split(object.GetURI())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Site/Site(getDependencyMap)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(ctx, uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}
func registerSite(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/Site/Site", reflect.TypeOf((*SiteSite)(nil)).Elem())
}
