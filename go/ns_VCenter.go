/*Package contractor(version: "0.1") - Automatically generated by cinp-codegen from /api/v1/VCenter/ at 2020-04-16T20:18:01.673062
 */
package contractor

import (
	"reflect"
	"time"
	cinp "github.com/cinp/go"
)

//VcenterVCenterComplex - Model VCenterComplex(/api/v1/VCenter/VCenterComplex)
/*
VCenterComplex(name, site, description, built_percentage, updated, created, complex_ptr, vcenter_host, vcenter_username, vcenter_password, vcenter_datacenter, vcenter_cluster)
 */
type VcenterVCenterComplex struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Name string `json:"name"`
	Site string `json:"site"`
	Description string `json:"description"`
	BuiltPercentage int `json:"built_percentage"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	VcenterHost string `json:"vcenter_host"`
	VcenterUsername string `json:"vcenter_username"`
	VcenterPassword string `json:"vcenter_password"`
	VcenterDatacenter string `json:"vcenter_datacenter"`
	VcenterCluster string `json:"vcenter_cluster"`
	Members []string `json:"members"`
	State string `json:"state"`
	Type string `json:"type"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *VcenterVCenterComplex) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"name": object.Name,
			"site": object.Site,
			"description": object.Description,
			"built_percentage": object.BuiltPercentage,
			"vcenter_host": object.VcenterHost,
			"vcenter_username": object.VcenterUsername,
			"vcenter_password": object.VcenterPassword,
			"vcenter_datacenter": object.VcenterDatacenter,
			"vcenter_cluster": object.VcenterCluster,
		}
	}
	return &map[string]interface{}{ 
		"site": object.Site,
		"description": object.Description,
		"built_percentage": object.BuiltPercentage,
		"vcenter_host": object.VcenterHost,
		"vcenter_username": object.VcenterUsername,
		"vcenter_password": object.VcenterPassword,
		"vcenter_datacenter": object.VcenterDatacenter,
		"vcenter_cluster": object.VcenterCluster,
	}
}

// VcenterVCenterComplexNew - Make a new object of Model VCenterComplex
func (service *Contractor) VcenterVCenterComplexNew() *VcenterVCenterComplex {
	return &VcenterVCenterComplex{cinp: service.cinp}
}

// VcenterVCenterComplexNewWithID - Make a new object of Model VCenterComplex
func (service *Contractor) VcenterVCenterComplexNewWithID(id string) *VcenterVCenterComplex {
	result := VcenterVCenterComplex{cinp: service.cinp}
	result.SetID("/api/v1/VCenter/VCenterComplex:"+id+":")
	return &result
}

// VcenterVCenterComplexGet - Get function for Model VCenterComplex
func (service *Contractor) VcenterVCenterComplexGet(id string) (*VcenterVCenterComplex, error) {
	object, err := service.cinp.Get("/api/v1/VCenter/VCenterComplex:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*VcenterVCenterComplex)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model VCenterComplex
func (object *VcenterVCenterComplex) Create() error {
	if err := object.cinp.Create("/api/v1/VCenter/VCenterComplex", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model VCenterComplex
func (object *VcenterVCenterComplex) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model VCenterComplex
func (object *VcenterVCenterComplex) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// VcenterVCenterComplexList - List function for Model VCenterComplex
func (service *Contractor) VcenterVCenterComplexList(filterName string, filterValues map[string]interface{}) <-chan *VcenterVCenterComplex {
	in := service.cinp.ListObjects("/api/v1/VCenter/VCenterComplex", reflect.TypeOf(VcenterVCenterComplex{}), filterName, filterValues, 50)
	out := make(chan *VcenterVCenterComplex)
	go func() {
		defer close(out)
		for v := range in {
			out <- v.(*VcenterVCenterComplex)
		}
	}()
	return out
}


//VcenterVCenterFoundation - Model VCenterFoundation(/api/v1/VCenter/VCenterFoundation)
/*
VCenterFoundation(locator, site, blueprint, id_map, located_at, built_at, updated, created, foundation_ptr, vcenter_complex, vcenter_uuid)
 */
type VcenterVCenterFoundation struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Locator string `json:"locator"`
	Site string `json:"site"`
	Blueprint string `json:"blueprint"`
	IDMap string `json:"id_map"`
	LocatedAt time.Time `json:"located_at"`
	BuiltAt time.Time `json:"built_at"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	VcenterComplex string `json:"vcenter_complex"`
	VcenterUUID string `json:"vcenter_uuid"`
	State string `json:"state"`
	Type string `json:"type"`
	ClassList string `json:"class_list"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *VcenterVCenterFoundation) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"locator": object.Locator,
			"site": object.Site,
			"blueprint": object.Blueprint,
			"id_map": object.IDMap,
			"vcenter_complex": object.VcenterComplex,
		}
	}
	return &map[string]interface{}{ 
		"site": object.Site,
		"blueprint": object.Blueprint,
		"id_map": object.IDMap,
		"vcenter_complex": object.VcenterComplex,
	}
}

// VcenterVCenterFoundationNew - Make a new object of Model VCenterFoundation
func (service *Contractor) VcenterVCenterFoundationNew() *VcenterVCenterFoundation {
	return &VcenterVCenterFoundation{cinp: service.cinp}
}

// VcenterVCenterFoundationNewWithID - Make a new object of Model VCenterFoundation
func (service *Contractor) VcenterVCenterFoundationNewWithID(id string) *VcenterVCenterFoundation {
	result := VcenterVCenterFoundation{cinp: service.cinp}
	result.SetID("/api/v1/VCenter/VCenterFoundation:"+id+":")
	return &result
}

// VcenterVCenterFoundationGet - Get function for Model VCenterFoundation
func (service *Contractor) VcenterVCenterFoundationGet(id string) (*VcenterVCenterFoundation, error) {
	object, err := service.cinp.Get("/api/v1/VCenter/VCenterFoundation:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*VcenterVCenterFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model VCenterFoundation
func (object *VcenterVCenterFoundation) Create() error {
	if err := object.cinp.Create("/api/v1/VCenter/VCenterFoundation", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model VCenterFoundation
func (object *VcenterVCenterFoundation) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model VCenterFoundation
func (object *VcenterVCenterFoundation) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// VcenterVCenterFoundationList - List function for Model VCenterFoundation
func (service *Contractor) VcenterVCenterFoundationList(filterName string, filterValues map[string]interface{}) <-chan *VcenterVCenterFoundation {
	in := service.cinp.ListObjects("/api/v1/VCenter/VCenterFoundation", reflect.TypeOf(VcenterVCenterFoundation{}), filterName, filterValues, 50)
	out := make(chan *VcenterVCenterFoundation)
	go func() {
		defer close(out)
		for v := range in {
			out <- v.(*VcenterVCenterFoundation)
		}
	}()
	return out
}

func registerVCenter(cinp *cinp.CInP) { 
	cinp.RegisterType("/api/v1/VCenter/VCenterComplex", reflect.TypeOf((*VcenterVCenterComplex)(nil)).Elem())
	cinp.RegisterType("/api/v1/VCenter/VCenterFoundation", reflect.TypeOf((*VcenterVCenterFoundation)(nil)).Elem())
}