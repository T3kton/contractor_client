/*Package contractor(version: "0.1") - Automatically generated by cinp-codegen from /api/v1/Foreman/ at 2020-07-29T04:55:03.557628
 */
package contractor

import (
	"reflect"
	"time"
	cinp "github.com/cinp/go"
)

//ForemanBaseJob - Model BaseJob(/api/v1/Foreman/BaseJob)
/*
BaseJob(id, site, state, status, message, script_runner, script_name, updated, created)
 */
type ForemanBaseJob struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Site string `json:"site"`
	State string `json:"state"`
	Status string `json:"status"`
	Message string `json:"message"`
	ScriptName string `json:"script_name"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	Progress string `json:"progress"`
	CanStart string `json:"can_start"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanBaseJob) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"state": object.State,
			"status": object.Status,
			"message": object.Message,
		}
	}
	return &map[string]interface{}{ 
		"state": object.State,
		"status": object.Status,
		"message": object.Message,
	}
}

// ForemanBaseJobNew - Make a new object of Model BaseJob
func (service *Contractor) ForemanBaseJobNew() *ForemanBaseJob {
	return &ForemanBaseJob{cinp: service.cinp}
}

// ForemanBaseJobNewWithID - Make a new object of Model BaseJob
func (service *Contractor) ForemanBaseJobNewWithID(id string) *ForemanBaseJob {
	result := ForemanBaseJob{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/BaseJob:"+id+":")
	return &result
}


// CallPause calls pause
func (object *ForemanBaseJob) CallPause() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(pause)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallResume calls resume
func (object *ForemanBaseJob) CallResume() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(resume)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallReset calls reset
func (object *ForemanBaseJob) CallReset() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(reset)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallRollback calls rollback
func (object *ForemanBaseJob) CallRollback() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(rollback)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallClearDispatched calls clearDispatched
func (object *ForemanBaseJob) CallClearDispatched() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(clearDispatched)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// ForemanBaseJobCallJobStats calls jobStatsNone
func (service *Contractor) ForemanBaseJobCallJobStats(site string) (map[string]interface{}, error) {
	args := map[string]interface{}{
		"site": site,
	}
	uri := "/api/v1/Foreman/BaseJob(jobStats)"

	result := map[string]interface{}{}

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerVariables calls jobRunnerVariables
func (object *ForemanBaseJob) CallJobRunnerVariables() (map[string]interface{}, error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(jobRunnerVariables)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerState calls jobRunnerState
func (object *ForemanBaseJob) CallJobRunnerState() (map[string]interface{}, error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(jobRunnerState)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}


//ForemanFoundationJob - Model FoundationJob(/api/v1/Foreman/FoundationJob)
/*
FoundationJob(id, site, state, status, message, script_runner, script_name, updated, created, basejob_ptr, foundation)
 */
type ForemanFoundationJob struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Site string `json:"site"`
	State string `json:"state"`
	Status string `json:"status"`
	Message string `json:"message"`
	ScriptName string `json:"script_name"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	Foundation string `json:"foundation"`
	Progress string `json:"progress"`
	CanStart string `json:"can_start"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanFoundationJob) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"state": object.State,
			"status": object.Status,
			"message": object.Message,
		}
	}
	return &map[string]interface{}{ 
		"state": object.State,
		"status": object.Status,
		"message": object.Message,
	}
}

// ForemanFoundationJobNew - Make a new object of Model FoundationJob
func (service *Contractor) ForemanFoundationJobNew() *ForemanFoundationJob {
	return &ForemanFoundationJob{cinp: service.cinp}
}

// ForemanFoundationJobNewWithID - Make a new object of Model FoundationJob
func (service *Contractor) ForemanFoundationJobNewWithID(id string) *ForemanFoundationJob {
	result := ForemanFoundationJob{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/FoundationJob:"+id+":")
	return &result
}

// ForemanFoundationJobGet - Get function for Model FoundationJob
func (service *Contractor) ForemanFoundationJobGet(id string) (*ForemanFoundationJob, error) {
	object, err := service.cinp.Get("/api/v1/Foreman/FoundationJob:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanFoundationJob)
	result.cinp = service.cinp

	return result, nil
}

// ForemanFoundationJobList - List function for Model FoundationJob
func (service *Contractor) ForemanFoundationJobList(filterName string, filterValues map[string]interface{}) <-chan *ForemanFoundationJob {
	in := service.cinp.ListObjects("/api/v1/Foreman/FoundationJob", reflect.TypeOf(ForemanFoundationJob{}), filterName, filterValues, 50)
	out := make(chan *ForemanFoundationJob)
	go func() {
		defer close(out)
		for v := range in {
			v.(*ForemanFoundationJob).cinp = service.cinp
			out <- v.(*ForemanFoundationJob)
		}
	}()
	return out
}


// CallPause calls pause
func (object *ForemanFoundationJob) CallPause() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(pause)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallResume calls resume
func (object *ForemanFoundationJob) CallResume() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(resume)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallReset calls reset
func (object *ForemanFoundationJob) CallReset() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(reset)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallRollback calls rollback
func (object *ForemanFoundationJob) CallRollback() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(rollback)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallJobRunnerVariables calls jobRunnerVariables
func (object *ForemanFoundationJob) CallJobRunnerVariables() (map[string]interface{}, error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(jobRunnerVariables)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerState calls jobRunnerState
func (object *ForemanFoundationJob) CallJobRunnerState() (map[string]interface{}, error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(jobRunnerState)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// ForemanFoundationJobCallGetFoundationJob calls getFoundationJobNone
func (service *Contractor) ForemanFoundationJobCallGetFoundationJob(foundation string) (string, error) {
	args := map[string]interface{}{
		"foundation": foundation,
	}
	uri := "/api/v1/Foreman/FoundationJob(getFoundationJob)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}


//ForemanStructureJob - Model StructureJob(/api/v1/Foreman/StructureJob)
/*
StructureJob(id, site, state, status, message, script_runner, script_name, updated, created, basejob_ptr, structure)
 */
type ForemanStructureJob struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Site string `json:"site"`
	State string `json:"state"`
	Status string `json:"status"`
	Message string `json:"message"`
	ScriptName string `json:"script_name"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	Structure string `json:"structure"`
	Progress string `json:"progress"`
	CanStart string `json:"can_start"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanStructureJob) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"state": object.State,
			"status": object.Status,
			"message": object.Message,
		}
	}
	return &map[string]interface{}{ 
		"state": object.State,
		"status": object.Status,
		"message": object.Message,
	}
}

// ForemanStructureJobNew - Make a new object of Model StructureJob
func (service *Contractor) ForemanStructureJobNew() *ForemanStructureJob {
	return &ForemanStructureJob{cinp: service.cinp}
}

// ForemanStructureJobNewWithID - Make a new object of Model StructureJob
func (service *Contractor) ForemanStructureJobNewWithID(id string) *ForemanStructureJob {
	result := ForemanStructureJob{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/StructureJob:"+id+":")
	return &result
}

// ForemanStructureJobGet - Get function for Model StructureJob
func (service *Contractor) ForemanStructureJobGet(id string) (*ForemanStructureJob, error) {
	object, err := service.cinp.Get("/api/v1/Foreman/StructureJob:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanStructureJob)
	result.cinp = service.cinp

	return result, nil
}

// ForemanStructureJobList - List function for Model StructureJob
func (service *Contractor) ForemanStructureJobList(filterName string, filterValues map[string]interface{}) <-chan *ForemanStructureJob {
	in := service.cinp.ListObjects("/api/v1/Foreman/StructureJob", reflect.TypeOf(ForemanStructureJob{}), filterName, filterValues, 50)
	out := make(chan *ForemanStructureJob)
	go func() {
		defer close(out)
		for v := range in {
			v.(*ForemanStructureJob).cinp = service.cinp
			out <- v.(*ForemanStructureJob)
		}
	}()
	return out
}


// CallPause calls pause
func (object *ForemanStructureJob) CallPause() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(pause)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallResume calls resume
func (object *ForemanStructureJob) CallResume() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(resume)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallReset calls reset
func (object *ForemanStructureJob) CallReset() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(reset)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallRollback calls rollback
func (object *ForemanStructureJob) CallRollback() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(rollback)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallJobRunnerVariables calls jobRunnerVariables
func (object *ForemanStructureJob) CallJobRunnerVariables() (map[string]interface{}, error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(jobRunnerVariables)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerState calls jobRunnerState
func (object *ForemanStructureJob) CallJobRunnerState() (map[string]interface{}, error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(jobRunnerState)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// ForemanStructureJobCallGetStructureJob calls getStructureJobNone
func (service *Contractor) ForemanStructureJobCallGetStructureJob(structure string) (string, error) {
	args := map[string]interface{}{
		"structure": structure,
	}
	uri := "/api/v1/Foreman/StructureJob(getStructureJob)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}


//ForemanDependencyJob - Model DependencyJob(/api/v1/Foreman/DependencyJob)
/*
DependencyJob(id, site, state, status, message, script_runner, script_name, updated, created, basejob_ptr, dependency)
 */
type ForemanDependencyJob struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Site string `json:"site"`
	State string `json:"state"`
	Status string `json:"status"`
	Message string `json:"message"`
	ScriptName string `json:"script_name"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
	Dependency string `json:"dependency"`
	Progress string `json:"progress"`
	CanStart string `json:"can_start"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanDependencyJob) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"state": object.State,
			"status": object.Status,
			"message": object.Message,
		}
	}
	return &map[string]interface{}{ 
		"state": object.State,
		"status": object.Status,
		"message": object.Message,
	}
}

// ForemanDependencyJobNew - Make a new object of Model DependencyJob
func (service *Contractor) ForemanDependencyJobNew() *ForemanDependencyJob {
	return &ForemanDependencyJob{cinp: service.cinp}
}

// ForemanDependencyJobNewWithID - Make a new object of Model DependencyJob
func (service *Contractor) ForemanDependencyJobNewWithID(id string) *ForemanDependencyJob {
	result := ForemanDependencyJob{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/DependencyJob:"+id+":")
	return &result
}

// ForemanDependencyJobGet - Get function for Model DependencyJob
func (service *Contractor) ForemanDependencyJobGet(id string) (*ForemanDependencyJob, error) {
	object, err := service.cinp.Get("/api/v1/Foreman/DependencyJob:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanDependencyJob)
	result.cinp = service.cinp

	return result, nil
}

// ForemanDependencyJobList - List function for Model DependencyJob
func (service *Contractor) ForemanDependencyJobList(filterName string, filterValues map[string]interface{}) <-chan *ForemanDependencyJob {
	in := service.cinp.ListObjects("/api/v1/Foreman/DependencyJob", reflect.TypeOf(ForemanDependencyJob{}), filterName, filterValues, 50)
	out := make(chan *ForemanDependencyJob)
	go func() {
		defer close(out)
		for v := range in {
			v.(*ForemanDependencyJob).cinp = service.cinp
			out <- v.(*ForemanDependencyJob)
		}
	}()
	return out
}


// CallPause calls pause
func (object *ForemanDependencyJob) CallPause() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(pause)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallResume calls resume
func (object *ForemanDependencyJob) CallResume() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(resume)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallReset calls reset
func (object *ForemanDependencyJob) CallReset() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(reset)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallRollback calls rollback
func (object *ForemanDependencyJob) CallRollback() (error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(rollback)", ids)
	if err != nil {
		return err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// CallJobRunnerVariables calls jobRunnerVariables
func (object *ForemanDependencyJob) CallJobRunnerVariables() (map[string]interface{}, error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(jobRunnerVariables)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerState calls jobRunnerState
func (object *ForemanDependencyJob) CallJobRunnerState() (map[string]interface{}, error) {
	args := map[string]interface{}{
	}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(jobRunnerState)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// ForemanDependencyJobCallGetDependencyJob calls getDependencyJobNone
func (service *Contractor) ForemanDependencyJobCallGetDependencyJob(dependency string) (string, error) {
	args := map[string]interface{}{
		"dependency": dependency,
	}
	uri := "/api/v1/Foreman/DependencyJob(getDependencyJob)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}


//ForemanJobLog - Model JobLog(/api/v1/Foreman/JobLog)
/*
JobLog(id, site, job_id, target_id, target_class, target_description, script_name, creator, started_at, finished_at, canceled_by, canceled_at, updated, created)
 */
type ForemanJobLog struct {
	cinp.BaseObject
	cinp *cinp.CInP
	Site string `json:"site"`
	JobID int `json:"job_id"`
	TargetID string `json:"target_id"`
	TargetClass string `json:"target_class"`
	TargetDescription string `json:"target_description"`
	ScriptName string `json:"script_name"`
	Creator string `json:"creator"`
	StartedAt time.Time `json:"started_at"`
	FinishedAt time.Time `json:"finished_at"`
	CanceledBy string `json:"canceled_by"`
	CanceledAt time.Time `json:"canceled_at"`
	Updated time.Time `json:"updated"`
	Created time.Time `json:"created"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanJobLog) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
			"site": object.Site,
			"job_id": object.JobID,
			"target_id": object.TargetID,
			"target_class": object.TargetClass,
			"target_description": object.TargetDescription,
			"script_name": object.ScriptName,
			"creator": object.Creator,
			"started_at": object.StartedAt,
			"finished_at": object.FinishedAt,
			"canceled_by": object.CanceledBy,
			"canceled_at": object.CanceledAt,
		}
	}
	return &map[string]interface{}{ 
		"site": object.Site,
		"job_id": object.JobID,
		"target_id": object.TargetID,
		"target_class": object.TargetClass,
		"target_description": object.TargetDescription,
		"script_name": object.ScriptName,
		"creator": object.Creator,
		"started_at": object.StartedAt,
		"finished_at": object.FinishedAt,
		"canceled_by": object.CanceledBy,
		"canceled_at": object.CanceledAt,
	}
}

// ForemanJobLogNew - Make a new object of Model JobLog
func (service *Contractor) ForemanJobLogNew() *ForemanJobLog {
	return &ForemanJobLog{cinp: service.cinp}
}

// ForemanJobLogNewWithID - Make a new object of Model JobLog
func (service *Contractor) ForemanJobLogNewWithID(id string) *ForemanJobLog {
	result := ForemanJobLog{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/JobLog:"+id+":")
	return &result
}

// ForemanJobLogGet - Get function for Model JobLog
func (service *Contractor) ForemanJobLogGet(id string) (*ForemanJobLog, error) {
	object, err := service.cinp.Get("/api/v1/Foreman/JobLog:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanJobLog)
	result.cinp = service.cinp

	return result, nil
}

// ForemanJobLogList - List function for Model JobLog
func (service *Contractor) ForemanJobLogList(filterName string, filterValues map[string]interface{}) <-chan *ForemanJobLog {
	in := service.cinp.ListObjects("/api/v1/Foreman/JobLog", reflect.TypeOf(ForemanJobLog{}), filterName, filterValues, 50)
	out := make(chan *ForemanJobLog)
	go func() {
		defer close(out)
		for v := range in {
			v.(*ForemanJobLog).cinp = service.cinp
			out <- v.(*ForemanJobLog)
		}
	}()
	return out
}

func registerForeman(cinp *cinp.CInP) { 
	cinp.RegisterType("/api/v1/Foreman/BaseJob", reflect.TypeOf((*ForemanBaseJob)(nil)).Elem())
	cinp.RegisterType("/api/v1/Foreman/FoundationJob", reflect.TypeOf((*ForemanFoundationJob)(nil)).Elem())
	cinp.RegisterType("/api/v1/Foreman/StructureJob", reflect.TypeOf((*ForemanStructureJob)(nil)).Elem())
	cinp.RegisterType("/api/v1/Foreman/DependencyJob", reflect.TypeOf((*ForemanDependencyJob)(nil)).Elem())
	cinp.RegisterType("/api/v1/Foreman/JobLog", reflect.TypeOf((*ForemanJobLog)(nil)).Elem())
}