// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/Packet/ at 2024-03-29T15:40:31.896236
package contractor

import (
	"context"
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"time"
)

// PacketPacketComplex - Model PacketComplex(/api/v1/Packet/PacketComplex)
/*
PacketComplex(name, site, description, built_percentage, updated, created, complex_ptr, packet_auth_token, packet_facility, packet_project)
*/
type PacketPacketComplex struct {
	cinp.BaseObject
	cinp            *cinp.CInP `json:"-"`
	Name            *string    `json:"name,omitempty"`
	Site            *string    `json:"site,omitempty"`
	Description     *string    `json:"description,omitempty"`
	BuiltPercentage *int       `json:"built_percentage,omitempty"`
	Updated         *time.Time `json:"updated,omitempty"`
	Created         *time.Time `json:"created,omitempty"`
	PacketAuthToken *string    `json:"packet_auth_token,omitempty"`
	PacketFacility  *string    `json:"packet_facility,omitempty"`
	PacketProject   *string    `json:"packet_project,omitempty"`
	Members         *[]string  `json:"members,omitempty"`
	State           *string    `json:"state,omitempty"`
	Type            *string    `json:"type,omitempty"`
}

// PacketPacketComplexNew - Make a new object of Model PacketComplex
func (service *Contractor) PacketPacketComplexNew() *PacketPacketComplex {
	return &PacketPacketComplex{cinp: service.cinp}
}

// PacketPacketComplexNewWithID - Make a new object of Model PacketComplex
func (service *Contractor) PacketPacketComplexNewWithID(id string) *PacketPacketComplex {
	result := PacketPacketComplex{cinp: service.cinp}
	result.SetURI("/api/v1/Packet/PacketComplex:" + id + ":")
	return &result
}

// PacketPacketComplexGet - Get function for Model PacketComplex
func (service *Contractor) PacketPacketComplexGet(ctx context.Context, id string) (*PacketPacketComplex, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/Packet/PacketComplex:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PacketPacketComplex)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model PacketComplex
func (object *PacketPacketComplex) Create(ctx context.Context) (*PacketPacketComplex, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/Packet/PacketComplex", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*PacketPacketComplex), nil
}

// Update - Update function for Model PacketComplex
func (object *PacketPacketComplex) Update(ctx context.Context) (*PacketPacketComplex, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*PacketPacketComplex), nil
}

// Delete - Delete function for Model PacketComplex
func (object *PacketPacketComplex) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// PacketPacketComplexListFilters - Return a slice of valid filter names PacketComplex
func (service *Contractor) PacketPacketComplexListFilters() [0]string {
	return [0]string{}
}

// PacketPacketComplexList - List function for Model PacketComplex
func (service *Contractor) PacketPacketComplexList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *PacketPacketComplex, error) {
	if filterName != "" {
		for _, item := range service.PacketPacketComplexListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/Packet/PacketComplex", reflect.TypeOf(PacketPacketComplex{}), filterName, filterValues, 50)
	out := make(chan *PacketPacketComplex)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*PacketPacketComplex).cinp = service.cinp
			out <- (*v).(*PacketPacketComplex)
		}
	}()
	return out, nil
}

// PacketPacketFoundation - Model PacketFoundation(/api/v1/Packet/PacketFoundation)
/*
PacketFoundation(locator, site, blueprint, id_map, located_at, built_at, updated, created, foundation_ptr, packet_complex, packet_uuid)
*/
type PacketPacketFoundation struct {
	cinp.BaseObject
	cinp          *cinp.CInP `json:"-"`
	Locator       *string    `json:"locator,omitempty"`
	Site          *string    `json:"site,omitempty"`
	Blueprint     *string    `json:"blueprint,omitempty"`
	IDMap         *string    `json:"id_map,omitempty"`
	LocatedAt     *time.Time `json:"located_at,omitempty"`
	BuiltAt       *time.Time `json:"built_at,omitempty"`
	Updated       *time.Time `json:"updated,omitempty"`
	Created       *time.Time `json:"created,omitempty"`
	PacketComplex *string    `json:"packet_complex,omitempty"`
	PacketUUID    *string    `json:"packet_uuid,omitempty"`
	State         *string    `json:"state,omitempty"`
	Type          *string    `json:"type,omitempty"`
	ClassList     *string    `json:"class_list,omitempty"`
}

// PacketPacketFoundationNew - Make a new object of Model PacketFoundation
func (service *Contractor) PacketPacketFoundationNew() *PacketPacketFoundation {
	return &PacketPacketFoundation{cinp: service.cinp}
}

// PacketPacketFoundationNewWithID - Make a new object of Model PacketFoundation
func (service *Contractor) PacketPacketFoundationNewWithID(id string) *PacketPacketFoundation {
	result := PacketPacketFoundation{cinp: service.cinp}
	result.SetURI("/api/v1/Packet/PacketFoundation:" + id + ":")
	return &result
}

// PacketPacketFoundationGet - Get function for Model PacketFoundation
func (service *Contractor) PacketPacketFoundationGet(ctx context.Context, id string) (*PacketPacketFoundation, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/Packet/PacketFoundation:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*PacketPacketFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model PacketFoundation
func (object *PacketPacketFoundation) Create(ctx context.Context) (*PacketPacketFoundation, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/Packet/PacketFoundation", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*PacketPacketFoundation), nil
}

// Update - Update function for Model PacketFoundation
func (object *PacketPacketFoundation) Update(ctx context.Context) (*PacketPacketFoundation, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*PacketPacketFoundation), nil
}

// Delete - Delete function for Model PacketFoundation
func (object *PacketPacketFoundation) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// PacketPacketFoundationListFilters - Return a slice of valid filter names PacketFoundation
func (service *Contractor) PacketPacketFoundationListFilters() [1]string {
	return [1]string{"site"}
}

// PacketPacketFoundationList - List function for Model PacketFoundation
func (service *Contractor) PacketPacketFoundationList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *PacketPacketFoundation, error) {
	if filterName != "" {
		for _, item := range service.PacketPacketFoundationListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/Packet/PacketFoundation", reflect.TypeOf(PacketPacketFoundation{}), filterName, filterValues, 50)
	out := make(chan *PacketPacketFoundation)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*PacketPacketFoundation).cinp = service.cinp
			out <- (*v).(*PacketPacketFoundation)
		}
	}()
	return out, nil
}

func registerPacket(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/Packet/PacketComplex", reflect.TypeOf((*PacketPacketComplex)(nil)).Elem())
	cinp.RegisterType("/api/v1/Packet/PacketFoundation", reflect.TypeOf((*PacketPacketFoundation)(nil)).Elem())
}
