// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/IPMI/ at 2024-03-29T15:40:31.896236
package contractor

import (
	"context"
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"time"
)

// IpmiIPMIFoundation - Model IPMIFoundation(/api/v1/IPMI/IPMIFoundation)
/*
IPMIFoundation(locator, site, blueprint, id_map, located_at, built_at, updated, created, foundation_ptr, ipmi_username, ipmi_password, ipmi_ip_address, ipmi_sol_port, plot)
*/
type IpmiIPMIFoundation struct {
	cinp.BaseObject
	cinp          *cinp.CInP `json:"-"`
	Locator       *string    `json:"locator,omitempty"`
	Site          *string    `json:"site,omitempty"`
	Blueprint     *string    `json:"blueprint,omitempty"`
	IDMap         *string    `json:"id_map,omitempty"`
	LocatedAt     *time.Time `json:"located_at,omitempty"`
	BuiltAt       *time.Time `json:"built_at,omitempty"`
	Updated       *time.Time `json:"updated,omitempty"`
	Created       *time.Time `json:"created,omitempty"`
	IpmiUsername  *string    `json:"ipmi_username,omitempty"`
	IpmiPassword  *string    `json:"ipmi_password,omitempty"`
	IpmiIPAddress *string    `json:"ipmi_ip_address,omitempty"`
	IpmiSolPort   *string    `json:"ipmi_sol_port,omitempty"`
	Plot          *string    `json:"plot,omitempty"`
	State         *string    `json:"state,omitempty"`
	Type          *string    `json:"type,omitempty"`
	ClassList     *string    `json:"class_list,omitempty"`
}

// IpmiIPMIFoundationNew - Make a new object of Model IPMIFoundation
func (service *Contractor) IpmiIPMIFoundationNew() *IpmiIPMIFoundation {
	return &IpmiIPMIFoundation{cinp: service.cinp}
}

// IpmiIPMIFoundationNewWithID - Make a new object of Model IPMIFoundation
func (service *Contractor) IpmiIPMIFoundationNewWithID(id string) *IpmiIPMIFoundation {
	result := IpmiIPMIFoundation{cinp: service.cinp}
	result.SetURI("/api/v1/IPMI/IPMIFoundation:" + id + ":")
	return &result
}

// IpmiIPMIFoundationGet - Get function for Model IPMIFoundation
func (service *Contractor) IpmiIPMIFoundationGet(ctx context.Context, id string) (*IpmiIPMIFoundation, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/IPMI/IPMIFoundation:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*IpmiIPMIFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model IPMIFoundation
func (object *IpmiIPMIFoundation) Create(ctx context.Context) (*IpmiIPMIFoundation, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/IPMI/IPMIFoundation", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*IpmiIPMIFoundation), nil
}

// Update - Update function for Model IPMIFoundation
func (object *IpmiIPMIFoundation) Update(ctx context.Context) (*IpmiIPMIFoundation, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*IpmiIPMIFoundation), nil
}

// Delete - Delete function for Model IPMIFoundation
func (object *IpmiIPMIFoundation) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// IpmiIPMIFoundationListFilters - Return a slice of valid filter names IPMIFoundation
func (service *Contractor) IpmiIPMIFoundationListFilters() [1]string {
	return [1]string{"site"}
}

// IpmiIPMIFoundationList - List function for Model IPMIFoundation
func (service *Contractor) IpmiIPMIFoundationList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *IpmiIPMIFoundation, error) {
	if filterName != "" {
		for _, item := range service.IpmiIPMIFoundationListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/IPMI/IPMIFoundation", reflect.TypeOf(IpmiIPMIFoundation{}), filterName, filterValues, 50)
	out := make(chan *IpmiIPMIFoundation)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*IpmiIPMIFoundation).cinp = service.cinp
			out <- (*v).(*IpmiIPMIFoundation)
		}
	}()
	return out, nil
}

func registerIPMI(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/IPMI/IPMIFoundation", reflect.TypeOf((*IpmiIPMIFoundation)(nil)).Elem())
}
