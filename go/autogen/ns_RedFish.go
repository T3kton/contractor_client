// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/RedFish/ at 2024-03-26T14:17:37.955685
package contractor

import (
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"time"
)

// RedfishRedFishFoundation - Model RedFishFoundation(/api/v1/RedFish/RedFishFoundation)
/*
RedFishFoundation(locator, site, blueprint, id_map, located_at, built_at, updated, created, foundation_ptr, redfish_username, redfish_password, redfish_ip_address, redfish_sol_port, plot)
*/
type RedfishRedFishFoundation struct {
	cinp.BaseObject
	cinp             *cinp.CInP
	Locator          *string    `json:"locator"`
	Site             *string    `json:"site"`
	Blueprint        *string    `json:"blueprint"`
	IDMap            *string    `json:"id_map"`
	LocatedAt        *time.Time `json:"located_at"`
	BuiltAt          *time.Time `json:"built_at"`
	Updated          *time.Time `json:"updated"`
	Created          *time.Time `json:"created"`
	RedfishUsername  *string    `json:"redfish_username"`
	RedfishPassword  *string    `json:"redfish_password"`
	RedfishIPAddress *string    `json:"redfish_ip_address"`
	RedfishSolPort   *string    `json:"redfish_sol_port"`
	Plot             *string    `json:"plot"`
	State            *string    `json:"state"`
	Type             *string    `json:"type"`
	ClassList        *string    `json:"class_list"`
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *RedfishRedFishFoundation) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{
			"locator":            object.Locator,
			"site":               object.Site,
			"blueprint":          object.Blueprint,
			"id_map":             object.IDMap,
			"redfish_username":   object.RedfishUsername,
			"redfish_password":   object.RedfishPassword,
			"redfish_ip_address": object.RedfishIPAddress,
			"redfish_sol_port":   object.RedfishSolPort,
			"plot":               object.Plot,
		}
	}
	return &map[string]interface{}{
		"site":               object.Site,
		"blueprint":          object.Blueprint,
		"id_map":             object.IDMap,
		"redfish_username":   object.RedfishUsername,
		"redfish_password":   object.RedfishPassword,
		"redfish_ip_address": object.RedfishIPAddress,
		"redfish_sol_port":   object.RedfishSolPort,
		"plot":               object.Plot,
	}
}

// RedfishRedFishFoundationNew - Make a new object of Model RedFishFoundation
func (service *Contractor) RedfishRedFishFoundationNew() *RedfishRedFishFoundation {
	return &RedfishRedFishFoundation{cinp: service.cinp}
}

// RedfishRedFishFoundationNewWithID - Make a new object of Model RedFishFoundation
func (service *Contractor) RedfishRedFishFoundationNewWithID(id string) *RedfishRedFishFoundation {
	result := RedfishRedFishFoundation{cinp: service.cinp}
	result.SetID("/api/v1/RedFish/RedFishFoundation:" + id + ":")
	return &result
}

// RedfishRedFishFoundationGet - Get function for Model RedFishFoundation
func (service *Contractor) RedfishRedFishFoundationGet(id string) (*RedfishRedFishFoundation, error) {
	object, err := service.cinp.Get("/api/v1/RedFish/RedFishFoundation:" + id + ":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*RedfishRedFishFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model RedFishFoundation
func (object *RedfishRedFishFoundation) Create() error {
	if err := object.cinp.Create("/api/v1/RedFish/RedFishFoundation", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model RedFishFoundation
func (object *RedfishRedFishFoundation) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model RedFishFoundation
func (object *RedfishRedFishFoundation) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// RedfishRedFishFoundationListFilters - Return a slice of valid filter names RedFishFoundation
func (service *Contractor) RedfishRedFishFoundationListFilters() [1]string {
	return [1]string{"site"}
}

// RedfishRedFishFoundationList - List function for Model RedFishFoundation
func (service *Contractor) RedfishRedFishFoundationList(filterName string, filterValues map[string]interface{}) (<-chan *RedfishRedFishFoundation, error) {
	if filterName != "" {
		for _, item := range service.RedfishRedFishFoundationListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects("/api/v1/RedFish/RedFishFoundation", reflect.TypeOf(RedfishRedFishFoundation{}), filterName, filterValues, 50)
	out := make(chan *RedfishRedFishFoundation)
	go func() {
		defer close(out)
		for v := range in {
			v.(*RedfishRedFishFoundation).cinp = service.cinp
			out <- v.(*RedfishRedFishFoundation)
		}
	}()
	return out, nil
}

func registerRedFish(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/RedFish/RedFishFoundation", reflect.TypeOf((*RedfishRedFishFoundation)(nil)).Elem())
}
