// Package contractor - (version: "2.0") - Automatically generated by cinp-codegen from /api/v1/Auth/ at 2024-03-24T03:21:24.739985
package contractor

import (
	cinp "github.com/cinp/go"
	"reflect"
)
// AuthUser - Model User(/api/v1/Auth/User)
/*

*/
type AuthUser struct {
	cinp.BaseObject
	cinp *cinp.CInP
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *AuthUser) AsMap(isCreate bool) *map[string]interface{} {
	if isCreate {
		return &map[string]interface{}{ 
		}
	}
	return &map[string]interface{}{ 
	}
}

// AuthUserNew - Make a new object of Model User
func (service *Contractor) AuthUserNew() *AuthUser {
	return &AuthUser{cinp: service.cinp}
}

// AuthUserCallLogin calls login
func (service *Contractor) AuthUserCallLogin(Username string, Password string) (string, error) {
	args := map[string]interface{}{
		"username": Username,
		"password": Password,
	}
	uri := "/api/v1/Auth/User(login)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// AuthUserCallLogout calls logout
func (service *Contractor) AuthUserCallLogout() (error) {
	args := map[string]interface{}{
	}
	uri := "/api/v1/Auth/User(logout)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// AuthUserCallWhoami calls whoami
func (service *Contractor) AuthUserCallWhoami() (string, error) {
	args := map[string]interface{}{
	}
	uri := "/api/v1/Auth/User(whoami)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// AuthUserCallChangePassword calls changePassword
func (service *Contractor) AuthUserCallChangePassword(Password string) (error) {
	args := map[string]interface{}{
		"password": Password,
	}
	uri := "/api/v1/Auth/User(changePassword)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return err
	}

	return nil
}
func registerAuth(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/Auth/User", reflect.TypeOf((*AuthUser)(nil)).Elem())
}
