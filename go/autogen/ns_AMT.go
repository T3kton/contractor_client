// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/AMT/ at 2024-03-29T15:40:31.896236
package contractor

import (
	"context"
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"time"
)

// AmtAMTFoundation - Model AMTFoundation(/api/v1/AMT/AMTFoundation)
/*
AMTFoundation(locator, site, blueprint, id_map, located_at, built_at, updated, created, foundation_ptr, amt_username, amt_password, amt_ip_address, plot)
*/
type AmtAMTFoundation struct {
	cinp.BaseObject
	cinp         *cinp.CInP `json:"-"`
	Locator      *string    `json:"locator,omitempty"`
	Site         *string    `json:"site,omitempty"`
	Blueprint    *string    `json:"blueprint,omitempty"`
	IDMap        *string    `json:"id_map,omitempty"`
	LocatedAt    *time.Time `json:"located_at,omitempty"`
	BuiltAt      *time.Time `json:"built_at,omitempty"`
	Updated      *time.Time `json:"updated,omitempty"`
	Created      *time.Time `json:"created,omitempty"`
	AmtUsername  *string    `json:"amt_username,omitempty"`
	AmtPassword  *string    `json:"amt_password,omitempty"`
	AmtIPAddress *string    `json:"amt_ip_address,omitempty"`
	Plot         *string    `json:"plot,omitempty"`
	State        *string    `json:"state,omitempty"`
	Type         *string    `json:"type,omitempty"`
	ClassList    *string    `json:"class_list,omitempty"`
}

// AmtAMTFoundationNew - Make a new object of Model AMTFoundation
func (service *Contractor) AmtAMTFoundationNew() *AmtAMTFoundation {
	return &AmtAMTFoundation{cinp: service.cinp}
}

// AmtAMTFoundationNewWithID - Make a new object of Model AMTFoundation
func (service *Contractor) AmtAMTFoundationNewWithID(id string) *AmtAMTFoundation {
	result := AmtAMTFoundation{cinp: service.cinp}
	result.SetURI("/api/v1/AMT/AMTFoundation:" + id + ":")
	return &result
}

// AmtAMTFoundationGet - Get function for Model AMTFoundation
func (service *Contractor) AmtAMTFoundationGet(ctx context.Context, id string) (*AmtAMTFoundation, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/AMT/AMTFoundation:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*AmtAMTFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model AMTFoundation
func (object *AmtAMTFoundation) Create(ctx context.Context) (*AmtAMTFoundation, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/AMT/AMTFoundation", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*AmtAMTFoundation), nil
}

// Update - Update function for Model AMTFoundation
func (object *AmtAMTFoundation) Update(ctx context.Context) (*AmtAMTFoundation, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*AmtAMTFoundation), nil
}

// Delete - Delete function for Model AMTFoundation
func (object *AmtAMTFoundation) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// AmtAMTFoundationListFilters - Return a slice of valid filter names AMTFoundation
func (service *Contractor) AmtAMTFoundationListFilters() [1]string {
	return [1]string{"site"}
}

// AmtAMTFoundationList - List function for Model AMTFoundation
func (service *Contractor) AmtAMTFoundationList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *AmtAMTFoundation, error) {
	if filterName != "" {
		for _, item := range service.AmtAMTFoundationListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/AMT/AMTFoundation", reflect.TypeOf(AmtAMTFoundation{}), filterName, filterValues, 50)
	out := make(chan *AmtAMTFoundation)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*AmtAMTFoundation).cinp = service.cinp
			out <- (*v).(*AmtAMTFoundation)
		}
	}()
	return out, nil
}

func registerAMT(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/AMT/AMTFoundation", reflect.TypeOf((*AmtAMTFoundation)(nil)).Elem())
}
