// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/SubContractor/ at 2024-04-04T13:21:09.245892
package contractor

import (
	"context"
	cinp "github.com/cinp/go"
	"reflect"
)

// SubcontractorDispatch - Model Dispatch(/api/v1/SubContractor/Dispatch)
/*

 */
type SubcontractorDispatch struct {
	cinp.BaseObject
	cinp *cinp.CInP `json:"-"`
}

// SubcontractorDispatchNew - Make a new object of Model Dispatch
func (service *Contractor) SubcontractorDispatchNew() *SubcontractorDispatch {
	return &SubcontractorDispatch{cinp: service.cinp}
}

// SubcontractorDispatchCallGetJobs calls getJobs
func (service *Contractor) SubcontractorDispatchCallGetJobs(ctx context.Context, Site string, ModuleList []string, MaxJobs int) ([]map[string]interface{}, error) {
	args := map[string]interface{}{
		"site":        Site,
		"module_list": ModuleList,
		"max_jobs":    MaxJobs,
	}
	uri := "/api/v1/SubContractor/Dispatch(getJobs)"

	result := []map[string]interface{}{}

	if err := service.cinp.Call(ctx, uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// SubcontractorDispatchCallJobResults calls jobResults
func (service *Contractor) SubcontractorDispatchCallJobResults(ctx context.Context, JobID int, Cookie string, Data map[string]interface{}) (string, error) {
	args := map[string]interface{}{
		"job_id": JobID,
		"cookie": Cookie,
		"data":   Data,
	}
	uri := "/api/v1/SubContractor/Dispatch(jobResults)"

	result := ""

	if err := service.cinp.Call(ctx, uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// SubcontractorDispatchCallJobError calls jobError
func (service *Contractor) SubcontractorDispatchCallJobError(ctx context.Context, JobID int, Cookie string, Msg string) error {
	args := map[string]interface{}{
		"job_id": JobID,
		"cookie": Cookie,
		"msg":    Msg,
	}
	uri := "/api/v1/SubContractor/Dispatch(jobError)"

	result := ""

	if err := service.cinp.Call(ctx, uri, &args, &result); err != nil {
		return err
	}

	return nil
}

// SubcontractorDHCPd - Model DHCPd(/api/v1/SubContractor/DHCPd)
/*

 */
type SubcontractorDHCPd struct {
	cinp.BaseObject
	cinp *cinp.CInP `json:"-"`
}

// SubcontractorDHCPdNew - Make a new object of Model DHCPd
func (service *Contractor) SubcontractorDHCPdNew() *SubcontractorDHCPd {
	return &SubcontractorDHCPd{cinp: service.cinp}
}

// SubcontractorDHCPdCallGetDynamicPools calls getDynamicPools
func (service *Contractor) SubcontractorDHCPdCallGetDynamicPools(ctx context.Context, Site string) ([]map[string]interface{}, error) {
	args := map[string]interface{}{
		"site": Site,
	}
	uri := "/api/v1/SubContractor/DHCPd(getDynamicPools)"

	result := []map[string]interface{}{}

	if err := service.cinp.Call(ctx, uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// SubcontractorDHCPdCallGetStaticPools calls getStaticPools
func (service *Contractor) SubcontractorDHCPdCallGetStaticPools(ctx context.Context, Site string) (map[string]interface{}, error) {
	args := map[string]interface{}{
		"site": Site,
	}
	uri := "/api/v1/SubContractor/DHCPd(getStaticPools)"

	result := map[string]interface{}{}

	if err := service.cinp.Call(ctx, uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}
func registerSubContractor(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/SubContractor/Dispatch", reflect.TypeOf((*SubcontractorDispatch)(nil)).Elem())
	cinp.RegisterType("/api/v1/SubContractor/DHCPd", reflect.TypeOf((*SubcontractorDHCPd)(nil)).Elem())
}
