// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/BluePrint/ at 2024-04-01T17:21:15.706356
package contractor

import (
	"context"
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"strconv"
	"time"
)

// BlueprintBluePrint - Model BluePrint(/api/v1/BluePrint/BluePrint)
/*
BluePrint(name, description, config_values, updated, created)
*/
type BlueprintBluePrint struct {
	cinp.BaseObject
	cinp         *cinp.CInP              `json:"-"`
	Name         *string                 `json:"name,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	ConfigValues *map[string]interface{} `json:"config_values,omitempty"`
	Updated      *time.Time              `json:"updated,omitempty"`
	Created      *time.Time              `json:"created,omitempty"`
	ScriptMap    *map[string]interface{} `json:"script_map,omitempty"`
}

// BlueprintBluePrintNew - Make a new object of Model BluePrint
func (service *Contractor) BlueprintBluePrintNew() *BlueprintBluePrint {
	return &BlueprintBluePrint{cinp: service.cinp}
}

// BlueprintBluePrintNewWithID - Make a new object of Model BluePrint
func (service *Contractor) BlueprintBluePrintNewWithID(id string) *BlueprintBluePrint {
	result := BlueprintBluePrint{cinp: service.cinp}
	result.SetURI("/api/v1/BluePrint/BluePrint:" + id + ":")
	return &result
}

// CallGetConfig calls getConfig
func (object *BlueprintBluePrint) CallGetConfig(ctx context.Context) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	_, _, _, ids, _, err := object.cinp.Split(object.GetURI())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/BluePrint/BluePrint(getConfig)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(ctx, uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// BlueprintFoundationBluePrint - Model FoundationBluePrint(/api/v1/BluePrint/FoundationBluePrint)
/*
FoundationBluePrint(name, description, config_values, updated, created, blueprint_ptr, foundation_type_list, validation_template, physical_interface_names)
*/
type BlueprintFoundationBluePrint struct {
	cinp.BaseObject
	cinp                   *cinp.CInP              `json:"-"`
	Name                   *string                 `json:"name,omitempty"`
	Description            *string                 `json:"description,omitempty"`
	ConfigValues           *map[string]interface{} `json:"config_values,omitempty"`
	Updated                *time.Time              `json:"updated,omitempty"`
	Created                *time.Time              `json:"created,omitempty"`
	FoundationTypeList     *[]string               `json:"foundation_type_list,omitempty"`
	ValidationTemplate     *map[string]interface{} `json:"validation_template,omitempty"`
	PhysicalInterfaceNames *[]string               `json:"physical_interface_names,omitempty"`
	ParentList             *[]string               `json:"parent_list,omitempty"`
	ScriptMap              *map[string]interface{} `json:"script_map,omitempty"`
}

// BlueprintFoundationBluePrintNew - Make a new object of Model FoundationBluePrint
func (service *Contractor) BlueprintFoundationBluePrintNew() *BlueprintFoundationBluePrint {
	return &BlueprintFoundationBluePrint{cinp: service.cinp}
}

// BlueprintFoundationBluePrintNewWithID - Make a new object of Model FoundationBluePrint
func (service *Contractor) BlueprintFoundationBluePrintNewWithID(id string) *BlueprintFoundationBluePrint {
	result := BlueprintFoundationBluePrint{cinp: service.cinp}
	result.SetURI("/api/v1/BluePrint/FoundationBluePrint:" + id + ":")
	return &result
}

// BlueprintFoundationBluePrintGet - Get function for Model FoundationBluePrint
func (service *Contractor) BlueprintFoundationBluePrintGet(ctx context.Context, id string) (*BlueprintFoundationBluePrint, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/BluePrint/FoundationBluePrint:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*BlueprintFoundationBluePrint)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model FoundationBluePrint
func (object *BlueprintFoundationBluePrint) Create(ctx context.Context) (*BlueprintFoundationBluePrint, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/BluePrint/FoundationBluePrint", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintFoundationBluePrint), nil
}

// Update - Update function for Model FoundationBluePrint
func (object *BlueprintFoundationBluePrint) Update(ctx context.Context) (*BlueprintFoundationBluePrint, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintFoundationBluePrint), nil
}

// Delete - Delete function for Model FoundationBluePrint
func (object *BlueprintFoundationBluePrint) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// BlueprintFoundationBluePrintListFilters - Return a slice of valid filter names FoundationBluePrint
func (service *Contractor) BlueprintFoundationBluePrintListFilters() [0]string {
	return [0]string{}
}

// BlueprintFoundationBluePrintList - List function for Model FoundationBluePrint
func (service *Contractor) BlueprintFoundationBluePrintList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *BlueprintFoundationBluePrint, error) {
	if filterName != "" {
		for _, item := range service.BlueprintFoundationBluePrintListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/BluePrint/FoundationBluePrint", reflect.TypeOf(BlueprintFoundationBluePrint{}), filterName, filterValues, 50)
	out := make(chan *BlueprintFoundationBluePrint)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*BlueprintFoundationBluePrint).cinp = service.cinp
			out <- (*v).(*BlueprintFoundationBluePrint)
		}
	}()
	return out, nil
}

// CallGetConfig calls getConfig
func (object *BlueprintFoundationBluePrint) CallGetConfig(ctx context.Context) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	_, _, _, ids, _, err := object.cinp.Split(object.GetURI())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/BluePrint/FoundationBluePrint(getConfig)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(ctx, uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// BlueprintStructureBluePrint - Model StructureBluePrint(/api/v1/BluePrint/StructureBluePrint)
/*
StructureBluePrint(name, description, config_values, updated, created, blueprint_ptr)
*/
type BlueprintStructureBluePrint struct {
	cinp.BaseObject
	cinp                    *cinp.CInP              `json:"-"`
	Name                    *string                 `json:"name,omitempty"`
	Description             *string                 `json:"description,omitempty"`
	ConfigValues            *map[string]interface{} `json:"config_values,omitempty"`
	Updated                 *time.Time              `json:"updated,omitempty"`
	Created                 *time.Time              `json:"created,omitempty"`
	ParentList              *[]string               `json:"parent_list,omitempty"`
	FoundationBlueprintList *[]string               `json:"foundation_blueprint_list,omitempty"`
	ScriptMap               *map[string]interface{} `json:"script_map,omitempty"`
}

// BlueprintStructureBluePrintNew - Make a new object of Model StructureBluePrint
func (service *Contractor) BlueprintStructureBluePrintNew() *BlueprintStructureBluePrint {
	return &BlueprintStructureBluePrint{cinp: service.cinp}
}

// BlueprintStructureBluePrintNewWithID - Make a new object of Model StructureBluePrint
func (service *Contractor) BlueprintStructureBluePrintNewWithID(id string) *BlueprintStructureBluePrint {
	result := BlueprintStructureBluePrint{cinp: service.cinp}
	result.SetURI("/api/v1/BluePrint/StructureBluePrint:" + id + ":")
	return &result
}

// BlueprintStructureBluePrintGet - Get function for Model StructureBluePrint
func (service *Contractor) BlueprintStructureBluePrintGet(ctx context.Context, id string) (*BlueprintStructureBluePrint, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/BluePrint/StructureBluePrint:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*BlueprintStructureBluePrint)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model StructureBluePrint
func (object *BlueprintStructureBluePrint) Create(ctx context.Context) (*BlueprintStructureBluePrint, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/BluePrint/StructureBluePrint", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintStructureBluePrint), nil
}

// Update - Update function for Model StructureBluePrint
func (object *BlueprintStructureBluePrint) Update(ctx context.Context) (*BlueprintStructureBluePrint, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintStructureBluePrint), nil
}

// Delete - Delete function for Model StructureBluePrint
func (object *BlueprintStructureBluePrint) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// BlueprintStructureBluePrintListFilters - Return a slice of valid filter names StructureBluePrint
func (service *Contractor) BlueprintStructureBluePrintListFilters() [0]string {
	return [0]string{}
}

// BlueprintStructureBluePrintList - List function for Model StructureBluePrint
func (service *Contractor) BlueprintStructureBluePrintList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *BlueprintStructureBluePrint, error) {
	if filterName != "" {
		for _, item := range service.BlueprintStructureBluePrintListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/BluePrint/StructureBluePrint", reflect.TypeOf(BlueprintStructureBluePrint{}), filterName, filterValues, 50)
	out := make(chan *BlueprintStructureBluePrint)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*BlueprintStructureBluePrint).cinp = service.cinp
			out <- (*v).(*BlueprintStructureBluePrint)
		}
	}()
	return out, nil
}

// CallGetConfig calls getConfig
func (object *BlueprintStructureBluePrint) CallGetConfig(ctx context.Context) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	_, _, _, ids, _, err := object.cinp.Split(object.GetURI())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/BluePrint/StructureBluePrint(getConfig)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(ctx, uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// BlueprintScript - Model Script(/api/v1/BluePrint/Script)
/*
Script(name, description, script, updated, created)
*/
type BlueprintScript struct {
	cinp.BaseObject
	cinp        *cinp.CInP `json:"-"`
	Name        *string    `json:"name,omitempty"`
	Description *string    `json:"description,omitempty"`
	Script      *string    `json:"script,omitempty"`
	Updated     *time.Time `json:"updated,omitempty"`
	Created     *time.Time `json:"created,omitempty"`
}

// BlueprintScriptNew - Make a new object of Model Script
func (service *Contractor) BlueprintScriptNew() *BlueprintScript {
	return &BlueprintScript{cinp: service.cinp}
}

// BlueprintScriptNewWithID - Make a new object of Model Script
func (service *Contractor) BlueprintScriptNewWithID(id string) *BlueprintScript {
	result := BlueprintScript{cinp: service.cinp}
	result.SetURI("/api/v1/BluePrint/Script:" + id + ":")
	return &result
}

// BlueprintScriptGet - Get function for Model Script
func (service *Contractor) BlueprintScriptGet(ctx context.Context, id string) (*BlueprintScript, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/BluePrint/Script:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*BlueprintScript)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model Script
func (object *BlueprintScript) Create(ctx context.Context) (*BlueprintScript, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/BluePrint/Script", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintScript), nil
}

// Update - Update function for Model Script
func (object *BlueprintScript) Update(ctx context.Context) (*BlueprintScript, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintScript), nil
}

// Delete - Delete function for Model Script
func (object *BlueprintScript) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// BlueprintScriptListFilters - Return a slice of valid filter names Script
func (service *Contractor) BlueprintScriptListFilters() [0]string {
	return [0]string{}
}

// BlueprintScriptList - List function for Model Script
func (service *Contractor) BlueprintScriptList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *BlueprintScript, error) {
	if filterName != "" {
		for _, item := range service.BlueprintScriptListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/BluePrint/Script", reflect.TypeOf(BlueprintScript{}), filterName, filterValues, 50)
	out := make(chan *BlueprintScript)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*BlueprintScript).cinp = service.cinp
			out <- (*v).(*BlueprintScript)
		}
	}()
	return out, nil
}

// BlueprintBluePrintScript - Model BluePrintScript(/api/v1/BluePrint/BluePrintScript)
/*
BluePrintScript(id, blueprint, script, name, updated, created)
*/
type BlueprintBluePrintScript struct {
	cinp.BaseObject
	cinp      *cinp.CInP `json:"-"`
	Blueprint *string    `json:"blueprint,omitempty"`
	Script    *string    `json:"script,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Updated   *time.Time `json:"updated,omitempty"`
	Created   *time.Time `json:"created,omitempty"`
	ID        *int       `json:"id,omitempty"`
}

// BlueprintBluePrintScriptNew - Make a new object of Model BluePrintScript
func (service *Contractor) BlueprintBluePrintScriptNew() *BlueprintBluePrintScript {
	return &BlueprintBluePrintScript{cinp: service.cinp}
}

// BlueprintBluePrintScriptNewWithID - Make a new object of Model BluePrintScript
func (service *Contractor) BlueprintBluePrintScriptNewWithID(id int) *BlueprintBluePrintScript {
	result := BlueprintBluePrintScript{cinp: service.cinp}
	result.SetURI("/api/v1/BluePrint/BluePrintScript:" + strconv.FormatInt(int64(id), 10) + ":")
	return &result
}

// BlueprintBluePrintScriptGet - Get function for Model BluePrintScript
func (service *Contractor) BlueprintBluePrintScriptGet(ctx context.Context, id int) (*BlueprintBluePrintScript, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/BluePrint/BluePrintScript:"+strconv.FormatInt(int64(id), 10)+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*BlueprintBluePrintScript)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model BluePrintScript
func (object *BlueprintBluePrintScript) Create(ctx context.Context) (*BlueprintBluePrintScript, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/BluePrint/BluePrintScript", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintBluePrintScript), nil
}

// Update - Update function for Model BluePrintScript
func (object *BlueprintBluePrintScript) Update(ctx context.Context) (*BlueprintBluePrintScript, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintBluePrintScript), nil
}

// Delete - Delete function for Model BluePrintScript
func (object *BlueprintBluePrintScript) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// BlueprintBluePrintScriptListFilters - Return a slice of valid filter names BluePrintScript
func (service *Contractor) BlueprintBluePrintScriptListFilters() [1]string {
	return [1]string{"blueprint"}
}

// BlueprintBluePrintScriptList - List function for Model BluePrintScript
func (service *Contractor) BlueprintBluePrintScriptList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *BlueprintBluePrintScript, error) {
	if filterName != "" {
		for _, item := range service.BlueprintBluePrintScriptListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/BluePrint/BluePrintScript", reflect.TypeOf(BlueprintBluePrintScript{}), filterName, filterValues, 50)
	out := make(chan *BlueprintBluePrintScript)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*BlueprintBluePrintScript).cinp = service.cinp
			out <- (*v).(*BlueprintBluePrintScript)
		}
	}()
	return out, nil
}

// BlueprintPXE - Model PXE(/api/v1/BluePrint/PXE)
/*
PXE(name, boot_script, template, updated, created)
*/
type BlueprintPXE struct {
	cinp.BaseObject
	cinp       *cinp.CInP `json:"-"`
	Name       *string    `json:"name,omitempty"`
	BootScript *string    `json:"boot_script,omitempty"`
	Template   *string    `json:"template,omitempty"`
	Updated    *time.Time `json:"updated,omitempty"`
	Created    *time.Time `json:"created,omitempty"`
}

// BlueprintPXENew - Make a new object of Model PXE
func (service *Contractor) BlueprintPXENew() *BlueprintPXE {
	return &BlueprintPXE{cinp: service.cinp}
}

// BlueprintPXENewWithID - Make a new object of Model PXE
func (service *Contractor) BlueprintPXENewWithID(id string) *BlueprintPXE {
	result := BlueprintPXE{cinp: service.cinp}
	result.SetURI("/api/v1/BluePrint/PXE:" + id + ":")
	return &result
}

// BlueprintPXEGet - Get function for Model PXE
func (service *Contractor) BlueprintPXEGet(ctx context.Context, id string) (*BlueprintPXE, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/BluePrint/PXE:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*BlueprintPXE)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model PXE
func (object *BlueprintPXE) Create(ctx context.Context) (*BlueprintPXE, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/BluePrint/PXE", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintPXE), nil
}

// Update - Update function for Model PXE
func (object *BlueprintPXE) Update(ctx context.Context) (*BlueprintPXE, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*BlueprintPXE), nil
}

// Delete - Delete function for Model PXE
func (object *BlueprintPXE) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// BlueprintPXEListFilters - Return a slice of valid filter names PXE
func (service *Contractor) BlueprintPXEListFilters() [0]string {
	return [0]string{}
}

// BlueprintPXEList - List function for Model PXE
func (service *Contractor) BlueprintPXEList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *BlueprintPXE, error) {
	if filterName != "" {
		for _, item := range service.BlueprintPXEListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("Filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/BluePrint/PXE", reflect.TypeOf(BlueprintPXE{}), filterName, filterValues, 50)
	out := make(chan *BlueprintPXE)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*BlueprintPXE).cinp = service.cinp
			out <- (*v).(*BlueprintPXE)
		}
	}()
	return out, nil
}

func registerBluePrint(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/BluePrint/BluePrint", reflect.TypeOf((*BlueprintBluePrint)(nil)).Elem())
	cinp.RegisterType("/api/v1/BluePrint/FoundationBluePrint", reflect.TypeOf((*BlueprintFoundationBluePrint)(nil)).Elem())
	cinp.RegisterType("/api/v1/BluePrint/StructureBluePrint", reflect.TypeOf((*BlueprintStructureBluePrint)(nil)).Elem())
	cinp.RegisterType("/api/v1/BluePrint/Script", reflect.TypeOf((*BlueprintScript)(nil)).Elem())
	cinp.RegisterType("/api/v1/BluePrint/BluePrintScript", reflect.TypeOf((*BlueprintBluePrintScript)(nil)).Elem())
	cinp.RegisterType("/api/v1/BluePrint/PXE", reflect.TypeOf((*BlueprintPXE)(nil)).Elem())
}
