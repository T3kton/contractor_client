// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/Manual/ at 2024-05-24T15:42:51.144790
package contractor

import (
	"context"
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"strings"
	"time"
)

// ManualManualComplex - Model ManualComplex(/api/v1/Manual/ManualComplex)
/*
ManualComplex(name, site, description, built_percentage, updated, created, complex_ptr)
*/
type ManualManualComplex struct {
	cinp.BaseObject
	cinp            cinp.CInPClient `json:"-"`
	Name            *string         `json:"name,omitempty"`
	Site            *string         `json:"site,omitempty"`
	Description     *string         `json:"description,omitempty"`
	BuiltPercentage *int            `json:"built_percentage,omitempty"`
	Updated         *time.Time      `json:"updated,omitempty"`
	Created         *time.Time      `json:"created,omitempty"`
	Members         *[]string       `json:"members,omitempty"`
	State           *string         `json:"state,omitempty"`
	Type            *string         `json:"type,omitempty"`
}

// ManualManualComplexNew - Make a new object of Model ManualComplex
func (service *Contractor) ManualManualComplexNew() *ManualManualComplex {
	return &ManualManualComplex{cinp: service.cinp}
}

// ManualManualComplexNewWithID - Make a new object of Model ManualComplex
func (service *Contractor) ManualManualComplexNewWithID(id string) *ManualManualComplex {
	result := ManualManualComplex{cinp: service.cinp}
	result.SetURI("/api/v1/Manual/ManualComplex:" + id + ":")
	return &result
}

// ManualManualComplexGet - Get function for Model ManualComplex
func (service *Contractor) ManualManualComplexGet(ctx context.Context, id string) (*ManualManualComplex, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/Manual/ManualComplex:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ManualManualComplex)
	result.cinp = service.cinp

	return result, nil
}

// ManualManualComplexGetURI - Get function for Model ManualComplex vi URI
func (service *Contractor) ManualManualComplexGetURI(ctx context.Context, uri string) (*ManualManualComplex, error) {
	if !strings.HasPrefix(uri, "/api/v1/Manual/ManualComplex:") {
		return nil, fmt.Errorf("URI is not for a 'ManualManualComplex'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*ManualManualComplex)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model ManualComplex
func (object *ManualManualComplex) Create(ctx context.Context) (*ManualManualComplex, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/Manual/ManualComplex", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*ManualManualComplex), nil
}

// Update - Update function for Model ManualComplex
func (object *ManualManualComplex) Update(ctx context.Context) (*ManualManualComplex, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*ManualManualComplex), nil
}

// Delete - Delete function for Model ManualComplex
func (object *ManualManualComplex) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// ManualManualComplexListFilters - Return a slice of valid filter names ManualComplex
func (service *Contractor) ManualManualComplexListFilters() [0]string {
	return [0]string{}
}

// ManualManualComplexList - List function for Model ManualComplex
func (service *Contractor) ManualManualComplexList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *ManualManualComplex, error) {
	if filterName != "" {
		for _, item := range service.ManualManualComplexListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/Manual/ManualComplex", reflect.TypeOf(ManualManualComplex{}), filterName, filterValues, 50)
	out := make(chan *ManualManualComplex)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*ManualManualComplex).cinp = service.cinp
			out <- (*v).(*ManualManualComplex)
		}
	}()
	return out, nil
}

// ManualManualFoundation - Model ManualFoundation(/api/v1/Manual/ManualFoundation)
/*
ManualFoundation(locator, site, blueprint, id_map, located_at, built_at, updated, created, foundation_ptr)
*/
type ManualManualFoundation struct {
	cinp.BaseObject
	cinp      cinp.CInPClient `json:"-"`
	Locator   *string         `json:"locator,omitempty"`
	Site      *string         `json:"site,omitempty"`
	Blueprint *string         `json:"blueprint,omitempty"`
	IDMap     *string         `json:"id_map,omitempty"`
	LocatedAt *time.Time      `json:"located_at,omitempty"`
	BuiltAt   *time.Time      `json:"built_at,omitempty"`
	Updated   *time.Time      `json:"updated,omitempty"`
	Created   *time.Time      `json:"created,omitempty"`
	State     *string         `json:"state,omitempty"`
	Type      *string         `json:"type,omitempty"`
	ClassList *string         `json:"class_list,omitempty"`
}

// ManualManualFoundationNew - Make a new object of Model ManualFoundation
func (service *Contractor) ManualManualFoundationNew() *ManualManualFoundation {
	return &ManualManualFoundation{cinp: service.cinp}
}

// ManualManualFoundationNewWithID - Make a new object of Model ManualFoundation
func (service *Contractor) ManualManualFoundationNewWithID(id string) *ManualManualFoundation {
	result := ManualManualFoundation{cinp: service.cinp}
	result.SetURI("/api/v1/Manual/ManualFoundation:" + id + ":")
	return &result
}

// ManualManualFoundationGet - Get function for Model ManualFoundation
func (service *Contractor) ManualManualFoundationGet(ctx context.Context, id string) (*ManualManualFoundation, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/Manual/ManualFoundation:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ManualManualFoundation)
	result.cinp = service.cinp

	return result, nil
}

// ManualManualFoundationGetURI - Get function for Model ManualFoundation vi URI
func (service *Contractor) ManualManualFoundationGetURI(ctx context.Context, uri string) (*ManualManualFoundation, error) {
	if !strings.HasPrefix(uri, "/api/v1/Manual/ManualFoundation:") {
		return nil, fmt.Errorf("URI is not for a 'ManualManualFoundation'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*ManualManualFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model ManualFoundation
func (object *ManualManualFoundation) Create(ctx context.Context) (*ManualManualFoundation, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/Manual/ManualFoundation", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*ManualManualFoundation), nil
}

// Update - Update function for Model ManualFoundation
func (object *ManualManualFoundation) Update(ctx context.Context) (*ManualManualFoundation, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*ManualManualFoundation), nil
}

// Delete - Delete function for Model ManualFoundation
func (object *ManualManualFoundation) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// ManualManualFoundationListFilters - Return a slice of valid filter names ManualFoundation
func (service *Contractor) ManualManualFoundationListFilters() [1]string {
	return [1]string{"site"}
}

// ManualManualFoundationList - List function for Model ManualFoundation
func (service *Contractor) ManualManualFoundationList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *ManualManualFoundation, error) {
	if filterName != "" {
		for _, item := range service.ManualManualFoundationListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/Manual/ManualFoundation", reflect.TypeOf(ManualManualFoundation{}), filterName, filterValues, 50)
	out := make(chan *ManualManualFoundation)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*ManualManualFoundation).cinp = service.cinp
			out <- (*v).(*ManualManualFoundation)
		}
	}()
	return out, nil
}

// ManualManualComplexedFoundation - Model ManualComplexedFoundation(/api/v1/Manual/ManualComplexedFoundation)
/*
ManualComplexedFoundation(locator, site, blueprint, id_map, located_at, built_at, updated, created, foundation_ptr, complex_host)
*/
type ManualManualComplexedFoundation struct {
	cinp.BaseObject
	cinp        cinp.CInPClient `json:"-"`
	Locator     *string         `json:"locator,omitempty"`
	Site        *string         `json:"site,omitempty"`
	Blueprint   *string         `json:"blueprint,omitempty"`
	IDMap       *string         `json:"id_map,omitempty"`
	LocatedAt   *time.Time      `json:"located_at,omitempty"`
	BuiltAt     *time.Time      `json:"built_at,omitempty"`
	Updated     *time.Time      `json:"updated,omitempty"`
	Created     *time.Time      `json:"created,omitempty"`
	ComplexHost *string         `json:"complex_host,omitempty"`
	State       *string         `json:"state,omitempty"`
	Type        *string         `json:"type,omitempty"`
	ClassList   *string         `json:"class_list,omitempty"`
}

// ManualManualComplexedFoundationNew - Make a new object of Model ManualComplexedFoundation
func (service *Contractor) ManualManualComplexedFoundationNew() *ManualManualComplexedFoundation {
	return &ManualManualComplexedFoundation{cinp: service.cinp}
}

// ManualManualComplexedFoundationNewWithID - Make a new object of Model ManualComplexedFoundation
func (service *Contractor) ManualManualComplexedFoundationNewWithID(id string) *ManualManualComplexedFoundation {
	result := ManualManualComplexedFoundation{cinp: service.cinp}
	result.SetURI("/api/v1/Manual/ManualComplexedFoundation:" + id + ":")
	return &result
}

// ManualManualComplexedFoundationGet - Get function for Model ManualComplexedFoundation
func (service *Contractor) ManualManualComplexedFoundationGet(ctx context.Context, id string) (*ManualManualComplexedFoundation, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/Manual/ManualComplexedFoundation:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ManualManualComplexedFoundation)
	result.cinp = service.cinp

	return result, nil
}

// ManualManualComplexedFoundationGetURI - Get function for Model ManualComplexedFoundation vi URI
func (service *Contractor) ManualManualComplexedFoundationGetURI(ctx context.Context, uri string) (*ManualManualComplexedFoundation, error) {
	if !strings.HasPrefix(uri, "/api/v1/Manual/ManualComplexedFoundation:") {
		return nil, fmt.Errorf("URI is not for a 'ManualManualComplexedFoundation'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*ManualManualComplexedFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model ManualComplexedFoundation
func (object *ManualManualComplexedFoundation) Create(ctx context.Context) (*ManualManualComplexedFoundation, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/Manual/ManualComplexedFoundation", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*ManualManualComplexedFoundation), nil
}

// Update - Update function for Model ManualComplexedFoundation
func (object *ManualManualComplexedFoundation) Update(ctx context.Context) (*ManualManualComplexedFoundation, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*ManualManualComplexedFoundation), nil
}

// Delete - Delete function for Model ManualComplexedFoundation
func (object *ManualManualComplexedFoundation) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// ManualManualComplexedFoundationListFilters - Return a slice of valid filter names ManualComplexedFoundation
func (service *Contractor) ManualManualComplexedFoundationListFilters() [1]string {
	return [1]string{"site"}
}

// ManualManualComplexedFoundationList - List function for Model ManualComplexedFoundation
func (service *Contractor) ManualManualComplexedFoundationList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *ManualManualComplexedFoundation, error) {
	if filterName != "" {
		for _, item := range service.ManualManualComplexedFoundationListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/Manual/ManualComplexedFoundation", reflect.TypeOf(ManualManualComplexedFoundation{}), filterName, filterValues, 50)
	out := make(chan *ManualManualComplexedFoundation)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*ManualManualComplexedFoundation).cinp = service.cinp
			out <- (*v).(*ManualManualComplexedFoundation)
		}
	}()
	return out, nil
}

func registerManual(cinp cinp.CInPClient) {
	cinp.RegisterType("/api/v1/Manual/ManualComplex", reflect.TypeOf((*ManualManualComplex)(nil)).Elem())
	cinp.RegisterType("/api/v1/Manual/ManualFoundation", reflect.TypeOf((*ManualManualFoundation)(nil)).Elem())
	cinp.RegisterType("/api/v1/Manual/ManualComplexedFoundation", reflect.TypeOf((*ManualManualComplexedFoundation)(nil)).Elem())
}
