// Package contractor - (version: "0.1") - Automatically generated by cinp-codegen from /api/v1/VirtualBox/ at 2024-05-23T12:38:27.938159
/*
Plugin for VirtualBox.
*/
package contractor

import (
	"context"
	"fmt"
	cinp "github.com/cinp/go"
	"reflect"
	"strings"
	"time"
)

// VirtualboxVirtualBoxComplex - Model VirtualBoxComplex(/api/v1/VirtualBox/VirtualBoxComplex)
/*
Complex for VirtualBox.  Only one member is allowed.  The ip address
for managing the VirtualBox instance comes from the member's primary ip.
*/
type VirtualboxVirtualBoxComplex struct {
	cinp.BaseObject
	cinp               *cinp.CInP `json:"-"`
	Name               *string    `json:"name,omitempty"`
	Site               *string    `json:"site,omitempty"`
	Description        *string    `json:"description,omitempty"`
	BuiltPercentage    *int       `json:"built_percentage,omitempty"`
	Updated            *time.Time `json:"updated,omitempty"`
	Created            *time.Time `json:"created,omitempty"`
	VirtualboxUsername *string    `json:"virtualbox_username,omitempty"`
	VirtualboxPassword *string    `json:"virtualbox_password,omitempty"`
	Members            *[]string  `json:"members,omitempty"`
	State              *string    `json:"state,omitempty"`
	Type               *string    `json:"type,omitempty"`
}

// VirtualboxVirtualBoxComplexNew - Make a new object of Model VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexNew() *VirtualboxVirtualBoxComplex {
	return &VirtualboxVirtualBoxComplex{cinp: service.cinp}
}

// VirtualboxVirtualBoxComplexNewWithID - Make a new object of Model VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexNewWithID(id string) *VirtualboxVirtualBoxComplex {
	result := VirtualboxVirtualBoxComplex{cinp: service.cinp}
	result.SetURI("/api/v1/VirtualBox/VirtualBoxComplex:" + id + ":")
	return &result
}

// VirtualboxVirtualBoxComplexGet - Get function for Model VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexGet(ctx context.Context, id string) (*VirtualboxVirtualBoxComplex, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/VirtualBox/VirtualBoxComplex:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*VirtualboxVirtualBoxComplex)
	result.cinp = service.cinp

	return result, nil
}

// VirtualboxVirtualBoxComplexGetURI - Get function for Model VirtualBoxComplex vi URI
func (service *Contractor) VirtualboxVirtualBoxComplexGetURI(ctx context.Context, uri string) (*VirtualboxVirtualBoxComplex, error) {
	if !strings.HasPrefix(uri, "/api/v1/VirtualBox/VirtualBoxComplex:") {
		return nil, fmt.Errorf("URI is not for a 'VirtualboxVirtualBoxComplex'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*VirtualboxVirtualBoxComplex)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model VirtualBoxComplex
func (object *VirtualboxVirtualBoxComplex) Create(ctx context.Context) (*VirtualboxVirtualBoxComplex, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/VirtualBox/VirtualBoxComplex", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*VirtualboxVirtualBoxComplex), nil
}

// Update - Update function for Model VirtualBoxComplex
func (object *VirtualboxVirtualBoxComplex) Update(ctx context.Context) (*VirtualboxVirtualBoxComplex, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*VirtualboxVirtualBoxComplex), nil
}

// Delete - Delete function for Model VirtualBoxComplex
func (object *VirtualboxVirtualBoxComplex) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// VirtualboxVirtualBoxComplexListFilters - Return a slice of valid filter names VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexListFilters() [0]string {
	return [0]string{}
}

// VirtualboxVirtualBoxComplexList - List function for Model VirtualBoxComplex
func (service *Contractor) VirtualboxVirtualBoxComplexList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *VirtualboxVirtualBoxComplex, error) {
	if filterName != "" {
		for _, item := range service.VirtualboxVirtualBoxComplexListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/VirtualBox/VirtualBoxComplex", reflect.TypeOf(VirtualboxVirtualBoxComplex{}), filterName, filterValues, 50)
	out := make(chan *VirtualboxVirtualBoxComplex)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*VirtualboxVirtualBoxComplex).cinp = service.cinp
			out <- (*v).(*VirtualboxVirtualBoxComplex)
		}
	}()
	return out, nil
}

// VirtualboxVirtualBoxFoundation - Model VirtualBoxFoundation(/api/v1/VirtualBox/VirtualBoxFoundation)
/*
Foundation for use with VirtualBoxComplex.  Foundation instances are tracked
by the internal VirtualBox Hardware UUID.
*/
type VirtualboxVirtualBoxFoundation struct {
	cinp.BaseObject
	cinp              *cinp.CInP `json:"-"`
	Locator           *string    `json:"locator,omitempty"`
	Site              *string    `json:"site,omitempty"`
	Blueprint         *string    `json:"blueprint,omitempty"`
	IDMap             *string    `json:"id_map,omitempty"`
	LocatedAt         *time.Time `json:"located_at,omitempty"`
	BuiltAt           *time.Time `json:"built_at,omitempty"`
	Updated           *time.Time `json:"updated,omitempty"`
	Created           *time.Time `json:"created,omitempty"`
	VirtualboxComplex *string    `json:"virtualbox_complex,omitempty"`
	VirtualboxUUID    *string    `json:"virtualbox_uuid,omitempty"`
	State             *string    `json:"state,omitempty"`
	Type              *string    `json:"type,omitempty"`
	ClassList         *string    `json:"class_list,omitempty"`
}

// VirtualboxVirtualBoxFoundationNew - Make a new object of Model VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationNew() *VirtualboxVirtualBoxFoundation {
	return &VirtualboxVirtualBoxFoundation{cinp: service.cinp}
}

// VirtualboxVirtualBoxFoundationNewWithID - Make a new object of Model VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationNewWithID(id string) *VirtualboxVirtualBoxFoundation {
	result := VirtualboxVirtualBoxFoundation{cinp: service.cinp}
	result.SetURI("/api/v1/VirtualBox/VirtualBoxFoundation:" + id + ":")
	return &result
}

// VirtualboxVirtualBoxFoundationGet - Get function for Model VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationGet(ctx context.Context, id string) (*VirtualboxVirtualBoxFoundation, error) {
	object, err := service.cinp.Get(ctx, "/api/v1/VirtualBox/VirtualBoxFoundation:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*VirtualboxVirtualBoxFoundation)
	result.cinp = service.cinp

	return result, nil
}

// VirtualboxVirtualBoxFoundationGetURI - Get function for Model VirtualBoxFoundation vi URI
func (service *Contractor) VirtualboxVirtualBoxFoundationGetURI(ctx context.Context, uri string) (*VirtualboxVirtualBoxFoundation, error) {
	if !strings.HasPrefix(uri, "/api/v1/VirtualBox/VirtualBoxFoundation:") {
		return nil, fmt.Errorf("URI is not for a 'VirtualboxVirtualBoxFoundation'")
	}

	object, err := service.cinp.Get(ctx, uri)
	if err != nil {
		return nil, err
	}
	result := (*object).(*VirtualboxVirtualBoxFoundation)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model VirtualBoxFoundation
func (object *VirtualboxVirtualBoxFoundation) Create(ctx context.Context) (*VirtualboxVirtualBoxFoundation, error) {
	result, err := object.cinp.Create(ctx, "/api/v1/VirtualBox/VirtualBoxFoundation", object)
	if err != nil {
		return nil, err
	}

	return (*result).(*VirtualboxVirtualBoxFoundation), nil
}

// Update - Update function for Model VirtualBoxFoundation
func (object *VirtualboxVirtualBoxFoundation) Update(ctx context.Context) (*VirtualboxVirtualBoxFoundation, error) {
	result, err := object.cinp.Update(ctx, object)
	if err != nil {
		return nil, err
	}

	return (*result).(*VirtualboxVirtualBoxFoundation), nil
}

// Delete - Delete function for Model VirtualBoxFoundation
func (object *VirtualboxVirtualBoxFoundation) Delete(ctx context.Context) error {
	if err := object.cinp.Delete(ctx, object); err != nil {
		return err
	}

	return nil
}

// VirtualboxVirtualBoxFoundationListFilters - Return a slice of valid filter names VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationListFilters() [1]string {
	return [1]string{"site"}
}

// VirtualboxVirtualBoxFoundationList - List function for Model VirtualBoxFoundation
func (service *Contractor) VirtualboxVirtualBoxFoundationList(ctx context.Context, filterName string, filterValues map[string]interface{}) (<-chan *VirtualboxVirtualBoxFoundation, error) {
	if filterName != "" {
		for _, item := range service.VirtualboxVirtualBoxFoundationListFilters() {
			if item == filterName {
				goto good
			}
		}
		return nil, fmt.Errorf("filter '%s' is invalid", filterName)
	}
good:

	in := service.cinp.ListObjects(ctx, "/api/v1/VirtualBox/VirtualBoxFoundation", reflect.TypeOf(VirtualboxVirtualBoxFoundation{}), filterName, filterValues, 50)
	out := make(chan *VirtualboxVirtualBoxFoundation)
	go func() {
		defer close(out)
		for v := range in {
			(*v).(*VirtualboxVirtualBoxFoundation).cinp = service.cinp
			out <- (*v).(*VirtualboxVirtualBoxFoundation)
		}
	}()
	return out, nil
}

func registerVirtualBox(cinp *cinp.CInP) {
	cinp.RegisterType("/api/v1/VirtualBox/VirtualBoxComplex", reflect.TypeOf((*VirtualboxVirtualBoxComplex)(nil)).Elem())
	cinp.RegisterType("/api/v1/VirtualBox/VirtualBoxFoundation", reflect.TypeOf((*VirtualboxVirtualBoxFoundation)(nil)).Elem())
}
